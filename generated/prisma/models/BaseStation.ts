
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BaseStation` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BaseStation
 * Âü∫Á´ôÂÆû‰ΩìÔºàÂØπÂ∫îÊï∞ÊçÆÂ∫ìË°®Ôºödevice_base_stationÔºâ
 * ÊîØÊåÅÁªëÂÆöÊ°åÁâå„ÄÅÈáçÂêØ„ÄÅÊêúÁ¥¢Ê°åÁâåÔºàÂü∫‰∫éWebSocketÔºâ
 */
export type BaseStationModel = runtime.Types.Result.DefaultSelection<Prisma.$BaseStationPayload>

export type AggregateBaseStation = {
  _count: BaseStationCountAggregateOutputType | null
  _avg: BaseStationAvgAggregateOutputType | null
  _sum: BaseStationSumAggregateOutputType | null
  _min: BaseStationMinAggregateOutputType | null
  _max: BaseStationMaxAggregateOutputType | null
}

export type BaseStationAvgAggregateOutputType = {
  id: number | null
  port: number | null
  bindStatus: number | null
  status: number | null
  siteId: number | null
}

export type BaseStationSumAggregateOutputType = {
  id: number | null
  port: number | null
  bindStatus: number | null
  status: number | null
  siteId: number | null
}

export type BaseStationMinAggregateOutputType = {
  id: number | null
  stationCode: string | null
  stationName: string | null
  ipAddress: string | null
  port: number | null
  bindStatus: number | null
  status: number | null
  lastOnlineTime: Date | null
  createTime: Date | null
  updateTime: Date | null
  remark: string | null
  attributes: string | null
  isDeleted: boolean | null
  siteId: number | null
}

export type BaseStationMaxAggregateOutputType = {
  id: number | null
  stationCode: string | null
  stationName: string | null
  ipAddress: string | null
  port: number | null
  bindStatus: number | null
  status: number | null
  lastOnlineTime: Date | null
  createTime: Date | null
  updateTime: Date | null
  remark: string | null
  attributes: string | null
  isDeleted: boolean | null
  siteId: number | null
}

export type BaseStationCountAggregateOutputType = {
  id: number
  stationCode: number
  stationName: number
  ipAddress: number
  port: number
  bindStatus: number
  status: number
  lastOnlineTime: number
  createTime: number
  updateTime: number
  remark: number
  attributes: number
  isDeleted: number
  siteId: number
  _all: number
}


export type BaseStationAvgAggregateInputType = {
  id?: true
  port?: true
  bindStatus?: true
  status?: true
  siteId?: true
}

export type BaseStationSumAggregateInputType = {
  id?: true
  port?: true
  bindStatus?: true
  status?: true
  siteId?: true
}

export type BaseStationMinAggregateInputType = {
  id?: true
  stationCode?: true
  stationName?: true
  ipAddress?: true
  port?: true
  bindStatus?: true
  status?: true
  lastOnlineTime?: true
  createTime?: true
  updateTime?: true
  remark?: true
  attributes?: true
  isDeleted?: true
  siteId?: true
}

export type BaseStationMaxAggregateInputType = {
  id?: true
  stationCode?: true
  stationName?: true
  ipAddress?: true
  port?: true
  bindStatus?: true
  status?: true
  lastOnlineTime?: true
  createTime?: true
  updateTime?: true
  remark?: true
  attributes?: true
  isDeleted?: true
  siteId?: true
}

export type BaseStationCountAggregateInputType = {
  id?: true
  stationCode?: true
  stationName?: true
  ipAddress?: true
  port?: true
  bindStatus?: true
  status?: true
  lastOnlineTime?: true
  createTime?: true
  updateTime?: true
  remark?: true
  attributes?: true
  isDeleted?: true
  siteId?: true
  _all?: true
}

export type BaseStationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BaseStation to aggregate.
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseStations to fetch.
   */
  orderBy?: Prisma.BaseStationOrderByWithRelationInput | Prisma.BaseStationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BaseStationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` BaseStations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseStations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BaseStations
  **/
  _count?: true | BaseStationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BaseStationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BaseStationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BaseStationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BaseStationMaxAggregateInputType
}

export type GetBaseStationAggregateType<T extends BaseStationAggregateArgs> = {
      [P in keyof T & keyof AggregateBaseStation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBaseStation[P]>
    : Prisma.GetScalarType<T[P], AggregateBaseStation[P]>
}




export type BaseStationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BaseStationWhereInput
  orderBy?: Prisma.BaseStationOrderByWithAggregationInput | Prisma.BaseStationOrderByWithAggregationInput[]
  by: Prisma.BaseStationScalarFieldEnum[] | Prisma.BaseStationScalarFieldEnum
  having?: Prisma.BaseStationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BaseStationCountAggregateInputType | true
  _avg?: BaseStationAvgAggregateInputType
  _sum?: BaseStationSumAggregateInputType
  _min?: BaseStationMinAggregateInputType
  _max?: BaseStationMaxAggregateInputType
}

export type BaseStationGroupByOutputType = {
  id: number
  stationCode: string
  stationName: string
  ipAddress: string
  port: number | null
  bindStatus: number
  status: number
  lastOnlineTime: Date | null
  createTime: Date
  updateTime: Date
  remark: string | null
  attributes: string | null
  isDeleted: boolean
  siteId: number | null
  _count: BaseStationCountAggregateOutputType | null
  _avg: BaseStationAvgAggregateOutputType | null
  _sum: BaseStationSumAggregateOutputType | null
  _min: BaseStationMinAggregateOutputType | null
  _max: BaseStationMaxAggregateOutputType | null
}

type GetBaseStationGroupByPayload<T extends BaseStationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BaseStationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BaseStationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BaseStationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BaseStationGroupByOutputType[P]>
      }
    >
  >



export type BaseStationWhereInput = {
  AND?: Prisma.BaseStationWhereInput | Prisma.BaseStationWhereInput[]
  OR?: Prisma.BaseStationWhereInput[]
  NOT?: Prisma.BaseStationWhereInput | Prisma.BaseStationWhereInput[]
  id?: Prisma.IntFilter<"BaseStation"> | number
  stationCode?: Prisma.StringFilter<"BaseStation"> | string
  stationName?: Prisma.StringFilter<"BaseStation"> | string
  ipAddress?: Prisma.StringFilter<"BaseStation"> | string
  port?: Prisma.IntNullableFilter<"BaseStation"> | number | null
  bindStatus?: Prisma.IntFilter<"BaseStation"> | number
  status?: Prisma.IntFilter<"BaseStation"> | number
  lastOnlineTime?: Prisma.DateTimeNullableFilter<"BaseStation"> | Date | string | null
  createTime?: Prisma.DateTimeFilter<"BaseStation"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"BaseStation"> | Date | string
  remark?: Prisma.StringNullableFilter<"BaseStation"> | string | null
  attributes?: Prisma.StringNullableFilter<"BaseStation"> | string | null
  isDeleted?: Prisma.BoolFilter<"BaseStation"> | boolean
  siteId?: Prisma.IntNullableFilter<"BaseStation"> | number | null
  site?: Prisma.XOR<Prisma.SiteNullableScalarRelationFilter, Prisma.SiteWhereInput> | null
  deskSigns?: Prisma.DeskSignListRelationFilter
}

export type BaseStationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  stationCode?: Prisma.SortOrder
  stationName?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  port?: Prisma.SortOrderInput | Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  lastOnlineTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  attributes?: Prisma.SortOrderInput | Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrderInput | Prisma.SortOrder
  site?: Prisma.SiteOrderByWithRelationInput
  deskSigns?: Prisma.DeskSignOrderByRelationAggregateInput
}

export type BaseStationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  stationCode?: string
  AND?: Prisma.BaseStationWhereInput | Prisma.BaseStationWhereInput[]
  OR?: Prisma.BaseStationWhereInput[]
  NOT?: Prisma.BaseStationWhereInput | Prisma.BaseStationWhereInput[]
  stationName?: Prisma.StringFilter<"BaseStation"> | string
  ipAddress?: Prisma.StringFilter<"BaseStation"> | string
  port?: Prisma.IntNullableFilter<"BaseStation"> | number | null
  bindStatus?: Prisma.IntFilter<"BaseStation"> | number
  status?: Prisma.IntFilter<"BaseStation"> | number
  lastOnlineTime?: Prisma.DateTimeNullableFilter<"BaseStation"> | Date | string | null
  createTime?: Prisma.DateTimeFilter<"BaseStation"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"BaseStation"> | Date | string
  remark?: Prisma.StringNullableFilter<"BaseStation"> | string | null
  attributes?: Prisma.StringNullableFilter<"BaseStation"> | string | null
  isDeleted?: Prisma.BoolFilter<"BaseStation"> | boolean
  siteId?: Prisma.IntNullableFilter<"BaseStation"> | number | null
  site?: Prisma.XOR<Prisma.SiteNullableScalarRelationFilter, Prisma.SiteWhereInput> | null
  deskSigns?: Prisma.DeskSignListRelationFilter
}, "id" | "stationCode">

export type BaseStationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  stationCode?: Prisma.SortOrder
  stationName?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  port?: Prisma.SortOrderInput | Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  lastOnlineTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  attributes?: Prisma.SortOrderInput | Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.BaseStationCountOrderByAggregateInput
  _avg?: Prisma.BaseStationAvgOrderByAggregateInput
  _max?: Prisma.BaseStationMaxOrderByAggregateInput
  _min?: Prisma.BaseStationMinOrderByAggregateInput
  _sum?: Prisma.BaseStationSumOrderByAggregateInput
}

export type BaseStationScalarWhereWithAggregatesInput = {
  AND?: Prisma.BaseStationScalarWhereWithAggregatesInput | Prisma.BaseStationScalarWhereWithAggregatesInput[]
  OR?: Prisma.BaseStationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BaseStationScalarWhereWithAggregatesInput | Prisma.BaseStationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"BaseStation"> | number
  stationCode?: Prisma.StringWithAggregatesFilter<"BaseStation"> | string
  stationName?: Prisma.StringWithAggregatesFilter<"BaseStation"> | string
  ipAddress?: Prisma.StringWithAggregatesFilter<"BaseStation"> | string
  port?: Prisma.IntNullableWithAggregatesFilter<"BaseStation"> | number | null
  bindStatus?: Prisma.IntWithAggregatesFilter<"BaseStation"> | number
  status?: Prisma.IntWithAggregatesFilter<"BaseStation"> | number
  lastOnlineTime?: Prisma.DateTimeNullableWithAggregatesFilter<"BaseStation"> | Date | string | null
  createTime?: Prisma.DateTimeWithAggregatesFilter<"BaseStation"> | Date | string
  updateTime?: Prisma.DateTimeWithAggregatesFilter<"BaseStation"> | Date | string
  remark?: Prisma.StringNullableWithAggregatesFilter<"BaseStation"> | string | null
  attributes?: Prisma.StringNullableWithAggregatesFilter<"BaseStation"> | string | null
  isDeleted?: Prisma.BoolWithAggregatesFilter<"BaseStation"> | boolean
  siteId?: Prisma.IntNullableWithAggregatesFilter<"BaseStation"> | number | null
}

export type BaseStationCreateInput = {
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  site?: Prisma.SiteCreateNestedOneWithoutBaseStationsInput
  deskSigns?: Prisma.DeskSignCreateNestedManyWithoutBaseStationInput
}

export type BaseStationUncheckedCreateInput = {
  id?: number
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
  deskSigns?: Prisma.DeskSignUncheckedCreateNestedManyWithoutBaseStationInput
}

export type BaseStationUpdateInput = {
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  site?: Prisma.SiteUpdateOneWithoutBaseStationsNestedInput
  deskSigns?: Prisma.DeskSignUpdateManyWithoutBaseStationNestedInput
}

export type BaseStationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deskSigns?: Prisma.DeskSignUncheckedUpdateManyWithoutBaseStationNestedInput
}

export type BaseStationCreateManyInput = {
  id?: number
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
}

export type BaseStationUpdateManyMutationInput = {
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type BaseStationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type BaseStationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  stationCode?: Prisma.SortOrder
  stationName?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  port?: Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  lastOnlineTime?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  attributes?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type BaseStationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type BaseStationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  stationCode?: Prisma.SortOrder
  stationName?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  port?: Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  lastOnlineTime?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  attributes?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type BaseStationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  stationCode?: Prisma.SortOrder
  stationName?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  port?: Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  lastOnlineTime?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  attributes?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type BaseStationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  bindStatus?: Prisma.SortOrder
  status?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type BaseStationNullableScalarRelationFilter = {
  is?: Prisma.BaseStationWhereInput | null
  isNot?: Prisma.BaseStationWhereInput | null
}

export type BaseStationListRelationFilter = {
  every?: Prisma.BaseStationWhereInput
  some?: Prisma.BaseStationWhereInput
  none?: Prisma.BaseStationWhereInput
}

export type BaseStationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type BaseStationCreateNestedOneWithoutDeskSignsInput = {
  create?: Prisma.XOR<Prisma.BaseStationCreateWithoutDeskSignsInput, Prisma.BaseStationUncheckedCreateWithoutDeskSignsInput>
  connectOrCreate?: Prisma.BaseStationCreateOrConnectWithoutDeskSignsInput
  connect?: Prisma.BaseStationWhereUniqueInput
}

export type BaseStationUpdateOneWithoutDeskSignsNestedInput = {
  create?: Prisma.XOR<Prisma.BaseStationCreateWithoutDeskSignsInput, Prisma.BaseStationUncheckedCreateWithoutDeskSignsInput>
  connectOrCreate?: Prisma.BaseStationCreateOrConnectWithoutDeskSignsInput
  upsert?: Prisma.BaseStationUpsertWithoutDeskSignsInput
  disconnect?: Prisma.BaseStationWhereInput | boolean
  delete?: Prisma.BaseStationWhereInput | boolean
  connect?: Prisma.BaseStationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BaseStationUpdateToOneWithWhereWithoutDeskSignsInput, Prisma.BaseStationUpdateWithoutDeskSignsInput>, Prisma.BaseStationUncheckedUpdateWithoutDeskSignsInput>
}

export type BaseStationCreateNestedManyWithoutSiteInput = {
  create?: Prisma.XOR<Prisma.BaseStationCreateWithoutSiteInput, Prisma.BaseStationUncheckedCreateWithoutSiteInput> | Prisma.BaseStationCreateWithoutSiteInput[] | Prisma.BaseStationUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.BaseStationCreateOrConnectWithoutSiteInput | Prisma.BaseStationCreateOrConnectWithoutSiteInput[]
  createMany?: Prisma.BaseStationCreateManySiteInputEnvelope
  connect?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
}

export type BaseStationUncheckedCreateNestedManyWithoutSiteInput = {
  create?: Prisma.XOR<Prisma.BaseStationCreateWithoutSiteInput, Prisma.BaseStationUncheckedCreateWithoutSiteInput> | Prisma.BaseStationCreateWithoutSiteInput[] | Prisma.BaseStationUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.BaseStationCreateOrConnectWithoutSiteInput | Prisma.BaseStationCreateOrConnectWithoutSiteInput[]
  createMany?: Prisma.BaseStationCreateManySiteInputEnvelope
  connect?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
}

export type BaseStationUpdateManyWithoutSiteNestedInput = {
  create?: Prisma.XOR<Prisma.BaseStationCreateWithoutSiteInput, Prisma.BaseStationUncheckedCreateWithoutSiteInput> | Prisma.BaseStationCreateWithoutSiteInput[] | Prisma.BaseStationUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.BaseStationCreateOrConnectWithoutSiteInput | Prisma.BaseStationCreateOrConnectWithoutSiteInput[]
  upsert?: Prisma.BaseStationUpsertWithWhereUniqueWithoutSiteInput | Prisma.BaseStationUpsertWithWhereUniqueWithoutSiteInput[]
  createMany?: Prisma.BaseStationCreateManySiteInputEnvelope
  set?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  disconnect?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  delete?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  connect?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  update?: Prisma.BaseStationUpdateWithWhereUniqueWithoutSiteInput | Prisma.BaseStationUpdateWithWhereUniqueWithoutSiteInput[]
  updateMany?: Prisma.BaseStationUpdateManyWithWhereWithoutSiteInput | Prisma.BaseStationUpdateManyWithWhereWithoutSiteInput[]
  deleteMany?: Prisma.BaseStationScalarWhereInput | Prisma.BaseStationScalarWhereInput[]
}

export type BaseStationUncheckedUpdateManyWithoutSiteNestedInput = {
  create?: Prisma.XOR<Prisma.BaseStationCreateWithoutSiteInput, Prisma.BaseStationUncheckedCreateWithoutSiteInput> | Prisma.BaseStationCreateWithoutSiteInput[] | Prisma.BaseStationUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.BaseStationCreateOrConnectWithoutSiteInput | Prisma.BaseStationCreateOrConnectWithoutSiteInput[]
  upsert?: Prisma.BaseStationUpsertWithWhereUniqueWithoutSiteInput | Prisma.BaseStationUpsertWithWhereUniqueWithoutSiteInput[]
  createMany?: Prisma.BaseStationCreateManySiteInputEnvelope
  set?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  disconnect?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  delete?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  connect?: Prisma.BaseStationWhereUniqueInput | Prisma.BaseStationWhereUniqueInput[]
  update?: Prisma.BaseStationUpdateWithWhereUniqueWithoutSiteInput | Prisma.BaseStationUpdateWithWhereUniqueWithoutSiteInput[]
  updateMany?: Prisma.BaseStationUpdateManyWithWhereWithoutSiteInput | Prisma.BaseStationUpdateManyWithWhereWithoutSiteInput[]
  deleteMany?: Prisma.BaseStationScalarWhereInput | Prisma.BaseStationScalarWhereInput[]
}

export type BaseStationCreateWithoutDeskSignsInput = {
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  site?: Prisma.SiteCreateNestedOneWithoutBaseStationsInput
}

export type BaseStationUncheckedCreateWithoutDeskSignsInput = {
  id?: number
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
}

export type BaseStationCreateOrConnectWithoutDeskSignsInput = {
  where: Prisma.BaseStationWhereUniqueInput
  create: Prisma.XOR<Prisma.BaseStationCreateWithoutDeskSignsInput, Prisma.BaseStationUncheckedCreateWithoutDeskSignsInput>
}

export type BaseStationUpsertWithoutDeskSignsInput = {
  update: Prisma.XOR<Prisma.BaseStationUpdateWithoutDeskSignsInput, Prisma.BaseStationUncheckedUpdateWithoutDeskSignsInput>
  create: Prisma.XOR<Prisma.BaseStationCreateWithoutDeskSignsInput, Prisma.BaseStationUncheckedCreateWithoutDeskSignsInput>
  where?: Prisma.BaseStationWhereInput
}

export type BaseStationUpdateToOneWithWhereWithoutDeskSignsInput = {
  where?: Prisma.BaseStationWhereInput
  data: Prisma.XOR<Prisma.BaseStationUpdateWithoutDeskSignsInput, Prisma.BaseStationUncheckedUpdateWithoutDeskSignsInput>
}

export type BaseStationUpdateWithoutDeskSignsInput = {
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  site?: Prisma.SiteUpdateOneWithoutBaseStationsNestedInput
}

export type BaseStationUncheckedUpdateWithoutDeskSignsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type BaseStationCreateWithoutSiteInput = {
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  deskSigns?: Prisma.DeskSignCreateNestedManyWithoutBaseStationInput
}

export type BaseStationUncheckedCreateWithoutSiteInput = {
  id?: number
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  deskSigns?: Prisma.DeskSignUncheckedCreateNestedManyWithoutBaseStationInput
}

export type BaseStationCreateOrConnectWithoutSiteInput = {
  where: Prisma.BaseStationWhereUniqueInput
  create: Prisma.XOR<Prisma.BaseStationCreateWithoutSiteInput, Prisma.BaseStationUncheckedCreateWithoutSiteInput>
}

export type BaseStationCreateManySiteInputEnvelope = {
  data: Prisma.BaseStationCreateManySiteInput | Prisma.BaseStationCreateManySiteInput[]
}

export type BaseStationUpsertWithWhereUniqueWithoutSiteInput = {
  where: Prisma.BaseStationWhereUniqueInput
  update: Prisma.XOR<Prisma.BaseStationUpdateWithoutSiteInput, Prisma.BaseStationUncheckedUpdateWithoutSiteInput>
  create: Prisma.XOR<Prisma.BaseStationCreateWithoutSiteInput, Prisma.BaseStationUncheckedCreateWithoutSiteInput>
}

export type BaseStationUpdateWithWhereUniqueWithoutSiteInput = {
  where: Prisma.BaseStationWhereUniqueInput
  data: Prisma.XOR<Prisma.BaseStationUpdateWithoutSiteInput, Prisma.BaseStationUncheckedUpdateWithoutSiteInput>
}

export type BaseStationUpdateManyWithWhereWithoutSiteInput = {
  where: Prisma.BaseStationScalarWhereInput
  data: Prisma.XOR<Prisma.BaseStationUpdateManyMutationInput, Prisma.BaseStationUncheckedUpdateManyWithoutSiteInput>
}

export type BaseStationScalarWhereInput = {
  AND?: Prisma.BaseStationScalarWhereInput | Prisma.BaseStationScalarWhereInput[]
  OR?: Prisma.BaseStationScalarWhereInput[]
  NOT?: Prisma.BaseStationScalarWhereInput | Prisma.BaseStationScalarWhereInput[]
  id?: Prisma.IntFilter<"BaseStation"> | number
  stationCode?: Prisma.StringFilter<"BaseStation"> | string
  stationName?: Prisma.StringFilter<"BaseStation"> | string
  ipAddress?: Prisma.StringFilter<"BaseStation"> | string
  port?: Prisma.IntNullableFilter<"BaseStation"> | number | null
  bindStatus?: Prisma.IntFilter<"BaseStation"> | number
  status?: Prisma.IntFilter<"BaseStation"> | number
  lastOnlineTime?: Prisma.DateTimeNullableFilter<"BaseStation"> | Date | string | null
  createTime?: Prisma.DateTimeFilter<"BaseStation"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"BaseStation"> | Date | string
  remark?: Prisma.StringNullableFilter<"BaseStation"> | string | null
  attributes?: Prisma.StringNullableFilter<"BaseStation"> | string | null
  isDeleted?: Prisma.BoolFilter<"BaseStation"> | boolean
  siteId?: Prisma.IntNullableFilter<"BaseStation"> | number | null
}

export type BaseStationCreateManySiteInput = {
  id?: number
  stationCode: string
  stationName: string
  ipAddress: string
  port?: number | null
  bindStatus?: number
  status?: number
  lastOnlineTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
}

export type BaseStationUpdateWithoutSiteInput = {
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deskSigns?: Prisma.DeskSignUpdateManyWithoutBaseStationNestedInput
}

export type BaseStationUncheckedUpdateWithoutSiteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deskSigns?: Prisma.DeskSignUncheckedUpdateManyWithoutBaseStationNestedInput
}

export type BaseStationUncheckedUpdateManyWithoutSiteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  stationCode?: Prisma.StringFieldUpdateOperationsInput | string
  stationName?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bindStatus?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  lastOnlineTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type BaseStationCountOutputType
 */

export type BaseStationCountOutputType = {
  deskSigns: number
}

export type BaseStationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  deskSigns?: boolean | BaseStationCountOutputTypeCountDeskSignsArgs
}

/**
 * BaseStationCountOutputType without action
 */
export type BaseStationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStationCountOutputType
   */
  select?: Prisma.BaseStationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BaseStationCountOutputType without action
 */
export type BaseStationCountOutputTypeCountDeskSignsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DeskSignWhereInput
}


export type BaseStationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  stationCode?: boolean
  stationName?: boolean
  ipAddress?: boolean
  port?: boolean
  bindStatus?: boolean
  status?: boolean
  lastOnlineTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
  site?: boolean | Prisma.BaseStation$siteArgs<ExtArgs>
  deskSigns?: boolean | Prisma.BaseStation$deskSignsArgs<ExtArgs>
  _count?: boolean | Prisma.BaseStationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["baseStation"]>

export type BaseStationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  stationCode?: boolean
  stationName?: boolean
  ipAddress?: boolean
  port?: boolean
  bindStatus?: boolean
  status?: boolean
  lastOnlineTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
  site?: boolean | Prisma.BaseStation$siteArgs<ExtArgs>
}, ExtArgs["result"]["baseStation"]>

export type BaseStationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  stationCode?: boolean
  stationName?: boolean
  ipAddress?: boolean
  port?: boolean
  bindStatus?: boolean
  status?: boolean
  lastOnlineTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
  site?: boolean | Prisma.BaseStation$siteArgs<ExtArgs>
}, ExtArgs["result"]["baseStation"]>

export type BaseStationSelectScalar = {
  id?: boolean
  stationCode?: boolean
  stationName?: boolean
  ipAddress?: boolean
  port?: boolean
  bindStatus?: boolean
  status?: boolean
  lastOnlineTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
}

export type BaseStationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "stationCode" | "stationName" | "ipAddress" | "port" | "bindStatus" | "status" | "lastOnlineTime" | "createTime" | "updateTime" | "remark" | "attributes" | "isDeleted" | "siteId", ExtArgs["result"]["baseStation"]>
export type BaseStationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  site?: boolean | Prisma.BaseStation$siteArgs<ExtArgs>
  deskSigns?: boolean | Prisma.BaseStation$deskSignsArgs<ExtArgs>
  _count?: boolean | Prisma.BaseStationCountOutputTypeDefaultArgs<ExtArgs>
}
export type BaseStationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  site?: boolean | Prisma.BaseStation$siteArgs<ExtArgs>
}
export type BaseStationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  site?: boolean | Prisma.BaseStation$siteArgs<ExtArgs>
}

export type $BaseStationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BaseStation"
  objects: {
    site: Prisma.$SitePayload<ExtArgs> | null
    deskSigns: Prisma.$DeskSignPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    stationCode: string
    stationName: string
    ipAddress: string
    port: number | null
    bindStatus: number
    status: number
    lastOnlineTime: Date | null
    createTime: Date
    updateTime: Date
    remark: string | null
    attributes: string | null
    isDeleted: boolean
    siteId: number | null
  }, ExtArgs["result"]["baseStation"]>
  composites: {}
}

export type BaseStationGetPayload<S extends boolean | null | undefined | BaseStationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BaseStationPayload, S>

export type BaseStationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BaseStationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BaseStationCountAggregateInputType | true
  }

export interface BaseStationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BaseStation'], meta: { name: 'BaseStation' } }
  /**
   * Find zero or one BaseStation that matches the filter.
   * @param {BaseStationFindUniqueArgs} args - Arguments to find a BaseStation
   * @example
   * // Get one BaseStation
   * const baseStation = await prisma.baseStation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BaseStationFindUniqueArgs>(args: Prisma.SelectSubset<T, BaseStationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BaseStation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BaseStationFindUniqueOrThrowArgs} args - Arguments to find a BaseStation
   * @example
   * // Get one BaseStation
   * const baseStation = await prisma.baseStation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BaseStationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BaseStationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BaseStation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationFindFirstArgs} args - Arguments to find a BaseStation
   * @example
   * // Get one BaseStation
   * const baseStation = await prisma.baseStation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BaseStationFindFirstArgs>(args?: Prisma.SelectSubset<T, BaseStationFindFirstArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BaseStation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationFindFirstOrThrowArgs} args - Arguments to find a BaseStation
   * @example
   * // Get one BaseStation
   * const baseStation = await prisma.baseStation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BaseStationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BaseStationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BaseStations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BaseStations
   * const baseStations = await prisma.baseStation.findMany()
   * 
   * // Get first 10 BaseStations
   * const baseStations = await prisma.baseStation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const baseStationWithIdOnly = await prisma.baseStation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BaseStationFindManyArgs>(args?: Prisma.SelectSubset<T, BaseStationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BaseStation.
   * @param {BaseStationCreateArgs} args - Arguments to create a BaseStation.
   * @example
   * // Create one BaseStation
   * const BaseStation = await prisma.baseStation.create({
   *   data: {
   *     // ... data to create a BaseStation
   *   }
   * })
   * 
   */
  create<T extends BaseStationCreateArgs>(args: Prisma.SelectSubset<T, BaseStationCreateArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BaseStations.
   * @param {BaseStationCreateManyArgs} args - Arguments to create many BaseStations.
   * @example
   * // Create many BaseStations
   * const baseStation = await prisma.baseStation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BaseStationCreateManyArgs>(args?: Prisma.SelectSubset<T, BaseStationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BaseStations and returns the data saved in the database.
   * @param {BaseStationCreateManyAndReturnArgs} args - Arguments to create many BaseStations.
   * @example
   * // Create many BaseStations
   * const baseStation = await prisma.baseStation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BaseStations and only return the `id`
   * const baseStationWithIdOnly = await prisma.baseStation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BaseStationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BaseStationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BaseStation.
   * @param {BaseStationDeleteArgs} args - Arguments to delete one BaseStation.
   * @example
   * // Delete one BaseStation
   * const BaseStation = await prisma.baseStation.delete({
   *   where: {
   *     // ... filter to delete one BaseStation
   *   }
   * })
   * 
   */
  delete<T extends BaseStationDeleteArgs>(args: Prisma.SelectSubset<T, BaseStationDeleteArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BaseStation.
   * @param {BaseStationUpdateArgs} args - Arguments to update one BaseStation.
   * @example
   * // Update one BaseStation
   * const baseStation = await prisma.baseStation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BaseStationUpdateArgs>(args: Prisma.SelectSubset<T, BaseStationUpdateArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BaseStations.
   * @param {BaseStationDeleteManyArgs} args - Arguments to filter BaseStations to delete.
   * @example
   * // Delete a few BaseStations
   * const { count } = await prisma.baseStation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BaseStationDeleteManyArgs>(args?: Prisma.SelectSubset<T, BaseStationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BaseStations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BaseStations
   * const baseStation = await prisma.baseStation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BaseStationUpdateManyArgs>(args: Prisma.SelectSubset<T, BaseStationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BaseStations and returns the data updated in the database.
   * @param {BaseStationUpdateManyAndReturnArgs} args - Arguments to update many BaseStations.
   * @example
   * // Update many BaseStations
   * const baseStation = await prisma.baseStation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BaseStations and only return the `id`
   * const baseStationWithIdOnly = await prisma.baseStation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BaseStationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BaseStationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BaseStation.
   * @param {BaseStationUpsertArgs} args - Arguments to update or create a BaseStation.
   * @example
   * // Update or create a BaseStation
   * const baseStation = await prisma.baseStation.upsert({
   *   create: {
   *     // ... data to create a BaseStation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BaseStation we want to update
   *   }
   * })
   */
  upsert<T extends BaseStationUpsertArgs>(args: Prisma.SelectSubset<T, BaseStationUpsertArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BaseStations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationCountArgs} args - Arguments to filter BaseStations to count.
   * @example
   * // Count the number of BaseStations
   * const count = await prisma.baseStation.count({
   *   where: {
   *     // ... the filter for the BaseStations we want to count
   *   }
   * })
  **/
  count<T extends BaseStationCountArgs>(
    args?: Prisma.Subset<T, BaseStationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BaseStationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BaseStation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BaseStationAggregateArgs>(args: Prisma.Subset<T, BaseStationAggregateArgs>): Prisma.PrismaPromise<GetBaseStationAggregateType<T>>

  /**
   * Group by BaseStation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseStationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BaseStationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BaseStationGroupByArgs['orderBy'] }
      : { orderBy?: BaseStationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BaseStationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaseStationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BaseStation model
 */
readonly fields: BaseStationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BaseStation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BaseStationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  site<T extends Prisma.BaseStation$siteArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BaseStation$siteArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  deskSigns<T extends Prisma.BaseStation$deskSignsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BaseStation$deskSignsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BaseStation model
 */
export interface BaseStationFieldRefs {
  readonly id: Prisma.FieldRef<"BaseStation", 'Int'>
  readonly stationCode: Prisma.FieldRef<"BaseStation", 'String'>
  readonly stationName: Prisma.FieldRef<"BaseStation", 'String'>
  readonly ipAddress: Prisma.FieldRef<"BaseStation", 'String'>
  readonly port: Prisma.FieldRef<"BaseStation", 'Int'>
  readonly bindStatus: Prisma.FieldRef<"BaseStation", 'Int'>
  readonly status: Prisma.FieldRef<"BaseStation", 'Int'>
  readonly lastOnlineTime: Prisma.FieldRef<"BaseStation", 'DateTime'>
  readonly createTime: Prisma.FieldRef<"BaseStation", 'DateTime'>
  readonly updateTime: Prisma.FieldRef<"BaseStation", 'DateTime'>
  readonly remark: Prisma.FieldRef<"BaseStation", 'String'>
  readonly attributes: Prisma.FieldRef<"BaseStation", 'String'>
  readonly isDeleted: Prisma.FieldRef<"BaseStation", 'Boolean'>
  readonly siteId: Prisma.FieldRef<"BaseStation", 'Int'>
}
    

// Custom InputTypes
/**
 * BaseStation findUnique
 */
export type BaseStationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * Filter, which BaseStation to fetch.
   */
  where: Prisma.BaseStationWhereUniqueInput
}

/**
 * BaseStation findUniqueOrThrow
 */
export type BaseStationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * Filter, which BaseStation to fetch.
   */
  where: Prisma.BaseStationWhereUniqueInput
}

/**
 * BaseStation findFirst
 */
export type BaseStationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * Filter, which BaseStation to fetch.
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseStations to fetch.
   */
  orderBy?: Prisma.BaseStationOrderByWithRelationInput | Prisma.BaseStationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BaseStations.
   */
  cursor?: Prisma.BaseStationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` BaseStations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseStations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BaseStations.
   */
  distinct?: Prisma.BaseStationScalarFieldEnum | Prisma.BaseStationScalarFieldEnum[]
}

/**
 * BaseStation findFirstOrThrow
 */
export type BaseStationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * Filter, which BaseStation to fetch.
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseStations to fetch.
   */
  orderBy?: Prisma.BaseStationOrderByWithRelationInput | Prisma.BaseStationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BaseStations.
   */
  cursor?: Prisma.BaseStationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` BaseStations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseStations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BaseStations.
   */
  distinct?: Prisma.BaseStationScalarFieldEnum | Prisma.BaseStationScalarFieldEnum[]
}

/**
 * BaseStation findMany
 */
export type BaseStationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * Filter, which BaseStations to fetch.
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseStations to fetch.
   */
  orderBy?: Prisma.BaseStationOrderByWithRelationInput | Prisma.BaseStationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BaseStations.
   */
  cursor?: Prisma.BaseStationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` BaseStations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseStations.
   */
  skip?: number
  distinct?: Prisma.BaseStationScalarFieldEnum | Prisma.BaseStationScalarFieldEnum[]
}

/**
 * BaseStation create
 */
export type BaseStationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * The data needed to create a BaseStation.
   */
  data: Prisma.XOR<Prisma.BaseStationCreateInput, Prisma.BaseStationUncheckedCreateInput>
}

/**
 * BaseStation createMany
 */
export type BaseStationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BaseStations.
   */
  data: Prisma.BaseStationCreateManyInput | Prisma.BaseStationCreateManyInput[]
}

/**
 * BaseStation createManyAndReturn
 */
export type BaseStationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * The data used to create many BaseStations.
   */
  data: Prisma.BaseStationCreateManyInput | Prisma.BaseStationCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BaseStation update
 */
export type BaseStationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * The data needed to update a BaseStation.
   */
  data: Prisma.XOR<Prisma.BaseStationUpdateInput, Prisma.BaseStationUncheckedUpdateInput>
  /**
   * Choose, which BaseStation to update.
   */
  where: Prisma.BaseStationWhereUniqueInput
}

/**
 * BaseStation updateMany
 */
export type BaseStationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BaseStations.
   */
  data: Prisma.XOR<Prisma.BaseStationUpdateManyMutationInput, Prisma.BaseStationUncheckedUpdateManyInput>
  /**
   * Filter which BaseStations to update
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * Limit how many BaseStations to update.
   */
  limit?: number
}

/**
 * BaseStation updateManyAndReturn
 */
export type BaseStationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * The data used to update BaseStations.
   */
  data: Prisma.XOR<Prisma.BaseStationUpdateManyMutationInput, Prisma.BaseStationUncheckedUpdateManyInput>
  /**
   * Filter which BaseStations to update
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * Limit how many BaseStations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BaseStation upsert
 */
export type BaseStationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * The filter to search for the BaseStation to update in case it exists.
   */
  where: Prisma.BaseStationWhereUniqueInput
  /**
   * In case the BaseStation found by the `where` argument doesn't exist, create a new BaseStation with this data.
   */
  create: Prisma.XOR<Prisma.BaseStationCreateInput, Prisma.BaseStationUncheckedCreateInput>
  /**
   * In case the BaseStation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BaseStationUpdateInput, Prisma.BaseStationUncheckedUpdateInput>
}

/**
 * BaseStation delete
 */
export type BaseStationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  /**
   * Filter which BaseStation to delete.
   */
  where: Prisma.BaseStationWhereUniqueInput
}

/**
 * BaseStation deleteMany
 */
export type BaseStationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BaseStations to delete
   */
  where?: Prisma.BaseStationWhereInput
  /**
   * Limit how many BaseStations to delete.
   */
  limit?: number
}

/**
 * BaseStation.site
 */
export type BaseStation$siteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  where?: Prisma.SiteWhereInput
}

/**
 * BaseStation.deskSigns
 */
export type BaseStation$deskSignsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  where?: Prisma.DeskSignWhereInput
  orderBy?: Prisma.DeskSignOrderByWithRelationInput | Prisma.DeskSignOrderByWithRelationInput[]
  cursor?: Prisma.DeskSignWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DeskSignScalarFieldEnum | Prisma.DeskSignScalarFieldEnum[]
}

/**
 * BaseStation without action
 */
export type BaseStationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
}
