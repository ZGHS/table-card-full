
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DeskSign` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DeskSign
 * Ê°åÁâåÂÆû‰ΩìÔºàÂØπÂ∫îÊï∞ÊçÆÂ∫ìË°®Ôºödevice_desk_signÔºâ
 * ÊîØÊåÅÁªëÂÆöÂü∫Á´ô/Âú∫Âú∞„ÄÅÂäüËÄóÂàáÊç¢„ÄÅÈ¢ÑÂ≠òÊ∏ÖÂ±è„ÄÅÂØºÂÖ•ÂØºÂá∫
 */
export type DeskSignModel = runtime.Types.Result.DefaultSelection<Prisma.$DeskSignPayload>

export type AggregateDeskSign = {
  _count: DeskSignCountAggregateOutputType | null
  _avg: DeskSignAvgAggregateOutputType | null
  _sum: DeskSignSumAggregateOutputType | null
  _min: DeskSignMinAggregateOutputType | null
  _max: DeskSignMaxAggregateOutputType | null
}

export type DeskSignAvgAggregateOutputType = {
  id: number | null
  baseStationId: number | null
  status: number | null
  powerMode: number | null
  clearStatus: number | null
  siteId: number | null
}

export type DeskSignSumAggregateOutputType = {
  id: number | null
  baseStationId: number | null
  status: number | null
  powerMode: number | null
  clearStatus: number | null
  siteId: number | null
}

export type DeskSignMinAggregateOutputType = {
  id: number | null
  signCode: string | null
  signName: string | null
  baseStationId: number | null
  status: number | null
  powerMode: number | null
  clearStatus: number | null
  lastContentTime: Date | null
  createTime: Date | null
  updateTime: Date | null
  remark: string | null
  attributes: string | null
  isDeleted: boolean | null
  siteId: number | null
}

export type DeskSignMaxAggregateOutputType = {
  id: number | null
  signCode: string | null
  signName: string | null
  baseStationId: number | null
  status: number | null
  powerMode: number | null
  clearStatus: number | null
  lastContentTime: Date | null
  createTime: Date | null
  updateTime: Date | null
  remark: string | null
  attributes: string | null
  isDeleted: boolean | null
  siteId: number | null
}

export type DeskSignCountAggregateOutputType = {
  id: number
  signCode: number
  signName: number
  baseStationId: number
  status: number
  powerMode: number
  clearStatus: number
  lastContentTime: number
  createTime: number
  updateTime: number
  remark: number
  attributes: number
  isDeleted: number
  siteId: number
  _all: number
}


export type DeskSignAvgAggregateInputType = {
  id?: true
  baseStationId?: true
  status?: true
  powerMode?: true
  clearStatus?: true
  siteId?: true
}

export type DeskSignSumAggregateInputType = {
  id?: true
  baseStationId?: true
  status?: true
  powerMode?: true
  clearStatus?: true
  siteId?: true
}

export type DeskSignMinAggregateInputType = {
  id?: true
  signCode?: true
  signName?: true
  baseStationId?: true
  status?: true
  powerMode?: true
  clearStatus?: true
  lastContentTime?: true
  createTime?: true
  updateTime?: true
  remark?: true
  attributes?: true
  isDeleted?: true
  siteId?: true
}

export type DeskSignMaxAggregateInputType = {
  id?: true
  signCode?: true
  signName?: true
  baseStationId?: true
  status?: true
  powerMode?: true
  clearStatus?: true
  lastContentTime?: true
  createTime?: true
  updateTime?: true
  remark?: true
  attributes?: true
  isDeleted?: true
  siteId?: true
}

export type DeskSignCountAggregateInputType = {
  id?: true
  signCode?: true
  signName?: true
  baseStationId?: true
  status?: true
  powerMode?: true
  clearStatus?: true
  lastContentTime?: true
  createTime?: true
  updateTime?: true
  remark?: true
  attributes?: true
  isDeleted?: true
  siteId?: true
  _all?: true
}

export type DeskSignAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DeskSign to aggregate.
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeskSigns to fetch.
   */
  orderBy?: Prisma.DeskSignOrderByWithRelationInput | Prisma.DeskSignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DeskSignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` DeskSigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeskSigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DeskSigns
  **/
  _count?: true | DeskSignCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DeskSignAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DeskSignSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DeskSignMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DeskSignMaxAggregateInputType
}

export type GetDeskSignAggregateType<T extends DeskSignAggregateArgs> = {
      [P in keyof T & keyof AggregateDeskSign]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeskSign[P]>
    : Prisma.GetScalarType<T[P], AggregateDeskSign[P]>
}




export type DeskSignGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DeskSignWhereInput
  orderBy?: Prisma.DeskSignOrderByWithAggregationInput | Prisma.DeskSignOrderByWithAggregationInput[]
  by: Prisma.DeskSignScalarFieldEnum[] | Prisma.DeskSignScalarFieldEnum
  having?: Prisma.DeskSignScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DeskSignCountAggregateInputType | true
  _avg?: DeskSignAvgAggregateInputType
  _sum?: DeskSignSumAggregateInputType
  _min?: DeskSignMinAggregateInputType
  _max?: DeskSignMaxAggregateInputType
}

export type DeskSignGroupByOutputType = {
  id: number
  signCode: string
  signName: string
  baseStationId: number | null
  status: number
  powerMode: number
  clearStatus: number
  lastContentTime: Date | null
  createTime: Date
  updateTime: Date
  remark: string | null
  attributes: string | null
  isDeleted: boolean
  siteId: number | null
  _count: DeskSignCountAggregateOutputType | null
  _avg: DeskSignAvgAggregateOutputType | null
  _sum: DeskSignSumAggregateOutputType | null
  _min: DeskSignMinAggregateOutputType | null
  _max: DeskSignMaxAggregateOutputType | null
}

type GetDeskSignGroupByPayload<T extends DeskSignGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DeskSignGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DeskSignGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DeskSignGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DeskSignGroupByOutputType[P]>
      }
    >
  >



export type DeskSignWhereInput = {
  AND?: Prisma.DeskSignWhereInput | Prisma.DeskSignWhereInput[]
  OR?: Prisma.DeskSignWhereInput[]
  NOT?: Prisma.DeskSignWhereInput | Prisma.DeskSignWhereInput[]
  id?: Prisma.IntFilter<"DeskSign"> | number
  signCode?: Prisma.StringFilter<"DeskSign"> | string
  signName?: Prisma.StringFilter<"DeskSign"> | string
  baseStationId?: Prisma.IntNullableFilter<"DeskSign"> | number | null
  status?: Prisma.IntFilter<"DeskSign"> | number
  powerMode?: Prisma.IntFilter<"DeskSign"> | number
  clearStatus?: Prisma.IntFilter<"DeskSign"> | number
  lastContentTime?: Prisma.DateTimeNullableFilter<"DeskSign"> | Date | string | null
  createTime?: Prisma.DateTimeFilter<"DeskSign"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"DeskSign"> | Date | string
  remark?: Prisma.StringNullableFilter<"DeskSign"> | string | null
  attributes?: Prisma.StringNullableFilter<"DeskSign"> | string | null
  isDeleted?: Prisma.BoolFilter<"DeskSign"> | boolean
  siteId?: Prisma.IntNullableFilter<"DeskSign"> | number | null
  site?: Prisma.XOR<Prisma.SiteNullableScalarRelationFilter, Prisma.SiteWhereInput> | null
  baseStation?: Prisma.XOR<Prisma.BaseStationNullableScalarRelationFilter, Prisma.BaseStationWhereInput> | null
}

export type DeskSignOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  signCode?: Prisma.SortOrder
  signName?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  lastContentTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  attributes?: Prisma.SortOrderInput | Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrderInput | Prisma.SortOrder
  site?: Prisma.SiteOrderByWithRelationInput
  baseStation?: Prisma.BaseStationOrderByWithRelationInput
}

export type DeskSignWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  signCode?: string
  AND?: Prisma.DeskSignWhereInput | Prisma.DeskSignWhereInput[]
  OR?: Prisma.DeskSignWhereInput[]
  NOT?: Prisma.DeskSignWhereInput | Prisma.DeskSignWhereInput[]
  signName?: Prisma.StringFilter<"DeskSign"> | string
  baseStationId?: Prisma.IntNullableFilter<"DeskSign"> | number | null
  status?: Prisma.IntFilter<"DeskSign"> | number
  powerMode?: Prisma.IntFilter<"DeskSign"> | number
  clearStatus?: Prisma.IntFilter<"DeskSign"> | number
  lastContentTime?: Prisma.DateTimeNullableFilter<"DeskSign"> | Date | string | null
  createTime?: Prisma.DateTimeFilter<"DeskSign"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"DeskSign"> | Date | string
  remark?: Prisma.StringNullableFilter<"DeskSign"> | string | null
  attributes?: Prisma.StringNullableFilter<"DeskSign"> | string | null
  isDeleted?: Prisma.BoolFilter<"DeskSign"> | boolean
  siteId?: Prisma.IntNullableFilter<"DeskSign"> | number | null
  site?: Prisma.XOR<Prisma.SiteNullableScalarRelationFilter, Prisma.SiteWhereInput> | null
  baseStation?: Prisma.XOR<Prisma.BaseStationNullableScalarRelationFilter, Prisma.BaseStationWhereInput> | null
}, "id" | "signCode">

export type DeskSignOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  signCode?: Prisma.SortOrder
  signName?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  lastContentTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  attributes?: Prisma.SortOrderInput | Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.DeskSignCountOrderByAggregateInput
  _avg?: Prisma.DeskSignAvgOrderByAggregateInput
  _max?: Prisma.DeskSignMaxOrderByAggregateInput
  _min?: Prisma.DeskSignMinOrderByAggregateInput
  _sum?: Prisma.DeskSignSumOrderByAggregateInput
}

export type DeskSignScalarWhereWithAggregatesInput = {
  AND?: Prisma.DeskSignScalarWhereWithAggregatesInput | Prisma.DeskSignScalarWhereWithAggregatesInput[]
  OR?: Prisma.DeskSignScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DeskSignScalarWhereWithAggregatesInput | Prisma.DeskSignScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"DeskSign"> | number
  signCode?: Prisma.StringWithAggregatesFilter<"DeskSign"> | string
  signName?: Prisma.StringWithAggregatesFilter<"DeskSign"> | string
  baseStationId?: Prisma.IntNullableWithAggregatesFilter<"DeskSign"> | number | null
  status?: Prisma.IntWithAggregatesFilter<"DeskSign"> | number
  powerMode?: Prisma.IntWithAggregatesFilter<"DeskSign"> | number
  clearStatus?: Prisma.IntWithAggregatesFilter<"DeskSign"> | number
  lastContentTime?: Prisma.DateTimeNullableWithAggregatesFilter<"DeskSign"> | Date | string | null
  createTime?: Prisma.DateTimeWithAggregatesFilter<"DeskSign"> | Date | string
  updateTime?: Prisma.DateTimeWithAggregatesFilter<"DeskSign"> | Date | string
  remark?: Prisma.StringNullableWithAggregatesFilter<"DeskSign"> | string | null
  attributes?: Prisma.StringNullableWithAggregatesFilter<"DeskSign"> | string | null
  isDeleted?: Prisma.BoolWithAggregatesFilter<"DeskSign"> | boolean
  siteId?: Prisma.IntNullableWithAggregatesFilter<"DeskSign"> | number | null
}

export type DeskSignCreateInput = {
  signCode: string
  signName: string
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  site?: Prisma.SiteCreateNestedOneWithoutDeskSignsInput
  baseStation?: Prisma.BaseStationCreateNestedOneWithoutDeskSignsInput
}

export type DeskSignUncheckedCreateInput = {
  id?: number
  signCode: string
  signName: string
  baseStationId?: number | null
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
}

export type DeskSignUpdateInput = {
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  site?: Prisma.SiteUpdateOneWithoutDeskSignsNestedInput
  baseStation?: Prisma.BaseStationUpdateOneWithoutDeskSignsNestedInput
}

export type DeskSignUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  baseStationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type DeskSignCreateManyInput = {
  id?: number
  signCode: string
  signName: string
  baseStationId?: number | null
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
}

export type DeskSignUpdateManyMutationInput = {
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type DeskSignUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  baseStationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type DeskSignListRelationFilter = {
  every?: Prisma.DeskSignWhereInput
  some?: Prisma.DeskSignWhereInput
  none?: Prisma.DeskSignWhereInput
}

export type DeskSignOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DeskSignCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  signCode?: Prisma.SortOrder
  signName?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  lastContentTime?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  attributes?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type DeskSignAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type DeskSignMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  signCode?: Prisma.SortOrder
  signName?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  lastContentTime?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  attributes?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type DeskSignMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  signCode?: Prisma.SortOrder
  signName?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  lastContentTime?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  attributes?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type DeskSignSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  baseStationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  powerMode?: Prisma.SortOrder
  clearStatus?: Prisma.SortOrder
  siteId?: Prisma.SortOrder
}

export type DeskSignCreateNestedManyWithoutBaseStationInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutBaseStationInput, Prisma.DeskSignUncheckedCreateWithoutBaseStationInput> | Prisma.DeskSignCreateWithoutBaseStationInput[] | Prisma.DeskSignUncheckedCreateWithoutBaseStationInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutBaseStationInput | Prisma.DeskSignCreateOrConnectWithoutBaseStationInput[]
  createMany?: Prisma.DeskSignCreateManyBaseStationInputEnvelope
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
}

export type DeskSignUncheckedCreateNestedManyWithoutBaseStationInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutBaseStationInput, Prisma.DeskSignUncheckedCreateWithoutBaseStationInput> | Prisma.DeskSignCreateWithoutBaseStationInput[] | Prisma.DeskSignUncheckedCreateWithoutBaseStationInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutBaseStationInput | Prisma.DeskSignCreateOrConnectWithoutBaseStationInput[]
  createMany?: Prisma.DeskSignCreateManyBaseStationInputEnvelope
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
}

export type DeskSignUpdateManyWithoutBaseStationNestedInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutBaseStationInput, Prisma.DeskSignUncheckedCreateWithoutBaseStationInput> | Prisma.DeskSignCreateWithoutBaseStationInput[] | Prisma.DeskSignUncheckedCreateWithoutBaseStationInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutBaseStationInput | Prisma.DeskSignCreateOrConnectWithoutBaseStationInput[]
  upsert?: Prisma.DeskSignUpsertWithWhereUniqueWithoutBaseStationInput | Prisma.DeskSignUpsertWithWhereUniqueWithoutBaseStationInput[]
  createMany?: Prisma.DeskSignCreateManyBaseStationInputEnvelope
  set?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  disconnect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  delete?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  update?: Prisma.DeskSignUpdateWithWhereUniqueWithoutBaseStationInput | Prisma.DeskSignUpdateWithWhereUniqueWithoutBaseStationInput[]
  updateMany?: Prisma.DeskSignUpdateManyWithWhereWithoutBaseStationInput | Prisma.DeskSignUpdateManyWithWhereWithoutBaseStationInput[]
  deleteMany?: Prisma.DeskSignScalarWhereInput | Prisma.DeskSignScalarWhereInput[]
}

export type DeskSignUncheckedUpdateManyWithoutBaseStationNestedInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutBaseStationInput, Prisma.DeskSignUncheckedCreateWithoutBaseStationInput> | Prisma.DeskSignCreateWithoutBaseStationInput[] | Prisma.DeskSignUncheckedCreateWithoutBaseStationInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutBaseStationInput | Prisma.DeskSignCreateOrConnectWithoutBaseStationInput[]
  upsert?: Prisma.DeskSignUpsertWithWhereUniqueWithoutBaseStationInput | Prisma.DeskSignUpsertWithWhereUniqueWithoutBaseStationInput[]
  createMany?: Prisma.DeskSignCreateManyBaseStationInputEnvelope
  set?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  disconnect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  delete?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  update?: Prisma.DeskSignUpdateWithWhereUniqueWithoutBaseStationInput | Prisma.DeskSignUpdateWithWhereUniqueWithoutBaseStationInput[]
  updateMany?: Prisma.DeskSignUpdateManyWithWhereWithoutBaseStationInput | Prisma.DeskSignUpdateManyWithWhereWithoutBaseStationInput[]
  deleteMany?: Prisma.DeskSignScalarWhereInput | Prisma.DeskSignScalarWhereInput[]
}

export type DeskSignCreateNestedManyWithoutSiteInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutSiteInput, Prisma.DeskSignUncheckedCreateWithoutSiteInput> | Prisma.DeskSignCreateWithoutSiteInput[] | Prisma.DeskSignUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutSiteInput | Prisma.DeskSignCreateOrConnectWithoutSiteInput[]
  createMany?: Prisma.DeskSignCreateManySiteInputEnvelope
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
}

export type DeskSignUncheckedCreateNestedManyWithoutSiteInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutSiteInput, Prisma.DeskSignUncheckedCreateWithoutSiteInput> | Prisma.DeskSignCreateWithoutSiteInput[] | Prisma.DeskSignUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutSiteInput | Prisma.DeskSignCreateOrConnectWithoutSiteInput[]
  createMany?: Prisma.DeskSignCreateManySiteInputEnvelope
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
}

export type DeskSignUpdateManyWithoutSiteNestedInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutSiteInput, Prisma.DeskSignUncheckedCreateWithoutSiteInput> | Prisma.DeskSignCreateWithoutSiteInput[] | Prisma.DeskSignUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutSiteInput | Prisma.DeskSignCreateOrConnectWithoutSiteInput[]
  upsert?: Prisma.DeskSignUpsertWithWhereUniqueWithoutSiteInput | Prisma.DeskSignUpsertWithWhereUniqueWithoutSiteInput[]
  createMany?: Prisma.DeskSignCreateManySiteInputEnvelope
  set?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  disconnect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  delete?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  update?: Prisma.DeskSignUpdateWithWhereUniqueWithoutSiteInput | Prisma.DeskSignUpdateWithWhereUniqueWithoutSiteInput[]
  updateMany?: Prisma.DeskSignUpdateManyWithWhereWithoutSiteInput | Prisma.DeskSignUpdateManyWithWhereWithoutSiteInput[]
  deleteMany?: Prisma.DeskSignScalarWhereInput | Prisma.DeskSignScalarWhereInput[]
}

export type DeskSignUncheckedUpdateManyWithoutSiteNestedInput = {
  create?: Prisma.XOR<Prisma.DeskSignCreateWithoutSiteInput, Prisma.DeskSignUncheckedCreateWithoutSiteInput> | Prisma.DeskSignCreateWithoutSiteInput[] | Prisma.DeskSignUncheckedCreateWithoutSiteInput[]
  connectOrCreate?: Prisma.DeskSignCreateOrConnectWithoutSiteInput | Prisma.DeskSignCreateOrConnectWithoutSiteInput[]
  upsert?: Prisma.DeskSignUpsertWithWhereUniqueWithoutSiteInput | Prisma.DeskSignUpsertWithWhereUniqueWithoutSiteInput[]
  createMany?: Prisma.DeskSignCreateManySiteInputEnvelope
  set?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  disconnect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  delete?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  connect?: Prisma.DeskSignWhereUniqueInput | Prisma.DeskSignWhereUniqueInput[]
  update?: Prisma.DeskSignUpdateWithWhereUniqueWithoutSiteInput | Prisma.DeskSignUpdateWithWhereUniqueWithoutSiteInput[]
  updateMany?: Prisma.DeskSignUpdateManyWithWhereWithoutSiteInput | Prisma.DeskSignUpdateManyWithWhereWithoutSiteInput[]
  deleteMany?: Prisma.DeskSignScalarWhereInput | Prisma.DeskSignScalarWhereInput[]
}

export type DeskSignCreateWithoutBaseStationInput = {
  signCode: string
  signName: string
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  site?: Prisma.SiteCreateNestedOneWithoutDeskSignsInput
}

export type DeskSignUncheckedCreateWithoutBaseStationInput = {
  id?: number
  signCode: string
  signName: string
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
}

export type DeskSignCreateOrConnectWithoutBaseStationInput = {
  where: Prisma.DeskSignWhereUniqueInput
  create: Prisma.XOR<Prisma.DeskSignCreateWithoutBaseStationInput, Prisma.DeskSignUncheckedCreateWithoutBaseStationInput>
}

export type DeskSignCreateManyBaseStationInputEnvelope = {
  data: Prisma.DeskSignCreateManyBaseStationInput | Prisma.DeskSignCreateManyBaseStationInput[]
}

export type DeskSignUpsertWithWhereUniqueWithoutBaseStationInput = {
  where: Prisma.DeskSignWhereUniqueInput
  update: Prisma.XOR<Prisma.DeskSignUpdateWithoutBaseStationInput, Prisma.DeskSignUncheckedUpdateWithoutBaseStationInput>
  create: Prisma.XOR<Prisma.DeskSignCreateWithoutBaseStationInput, Prisma.DeskSignUncheckedCreateWithoutBaseStationInput>
}

export type DeskSignUpdateWithWhereUniqueWithoutBaseStationInput = {
  where: Prisma.DeskSignWhereUniqueInput
  data: Prisma.XOR<Prisma.DeskSignUpdateWithoutBaseStationInput, Prisma.DeskSignUncheckedUpdateWithoutBaseStationInput>
}

export type DeskSignUpdateManyWithWhereWithoutBaseStationInput = {
  where: Prisma.DeskSignScalarWhereInput
  data: Prisma.XOR<Prisma.DeskSignUpdateManyMutationInput, Prisma.DeskSignUncheckedUpdateManyWithoutBaseStationInput>
}

export type DeskSignScalarWhereInput = {
  AND?: Prisma.DeskSignScalarWhereInput | Prisma.DeskSignScalarWhereInput[]
  OR?: Prisma.DeskSignScalarWhereInput[]
  NOT?: Prisma.DeskSignScalarWhereInput | Prisma.DeskSignScalarWhereInput[]
  id?: Prisma.IntFilter<"DeskSign"> | number
  signCode?: Prisma.StringFilter<"DeskSign"> | string
  signName?: Prisma.StringFilter<"DeskSign"> | string
  baseStationId?: Prisma.IntNullableFilter<"DeskSign"> | number | null
  status?: Prisma.IntFilter<"DeskSign"> | number
  powerMode?: Prisma.IntFilter<"DeskSign"> | number
  clearStatus?: Prisma.IntFilter<"DeskSign"> | number
  lastContentTime?: Prisma.DateTimeNullableFilter<"DeskSign"> | Date | string | null
  createTime?: Prisma.DateTimeFilter<"DeskSign"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"DeskSign"> | Date | string
  remark?: Prisma.StringNullableFilter<"DeskSign"> | string | null
  attributes?: Prisma.StringNullableFilter<"DeskSign"> | string | null
  isDeleted?: Prisma.BoolFilter<"DeskSign"> | boolean
  siteId?: Prisma.IntNullableFilter<"DeskSign"> | number | null
}

export type DeskSignCreateWithoutSiteInput = {
  signCode: string
  signName: string
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  baseStation?: Prisma.BaseStationCreateNestedOneWithoutDeskSignsInput
}

export type DeskSignUncheckedCreateWithoutSiteInput = {
  id?: number
  signCode: string
  signName: string
  baseStationId?: number | null
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
}

export type DeskSignCreateOrConnectWithoutSiteInput = {
  where: Prisma.DeskSignWhereUniqueInput
  create: Prisma.XOR<Prisma.DeskSignCreateWithoutSiteInput, Prisma.DeskSignUncheckedCreateWithoutSiteInput>
}

export type DeskSignCreateManySiteInputEnvelope = {
  data: Prisma.DeskSignCreateManySiteInput | Prisma.DeskSignCreateManySiteInput[]
}

export type DeskSignUpsertWithWhereUniqueWithoutSiteInput = {
  where: Prisma.DeskSignWhereUniqueInput
  update: Prisma.XOR<Prisma.DeskSignUpdateWithoutSiteInput, Prisma.DeskSignUncheckedUpdateWithoutSiteInput>
  create: Prisma.XOR<Prisma.DeskSignCreateWithoutSiteInput, Prisma.DeskSignUncheckedCreateWithoutSiteInput>
}

export type DeskSignUpdateWithWhereUniqueWithoutSiteInput = {
  where: Prisma.DeskSignWhereUniqueInput
  data: Prisma.XOR<Prisma.DeskSignUpdateWithoutSiteInput, Prisma.DeskSignUncheckedUpdateWithoutSiteInput>
}

export type DeskSignUpdateManyWithWhereWithoutSiteInput = {
  where: Prisma.DeskSignScalarWhereInput
  data: Prisma.XOR<Prisma.DeskSignUpdateManyMutationInput, Prisma.DeskSignUncheckedUpdateManyWithoutSiteInput>
}

export type DeskSignCreateManyBaseStationInput = {
  id?: number
  signCode: string
  signName: string
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
  siteId?: number | null
}

export type DeskSignUpdateWithoutBaseStationInput = {
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  site?: Prisma.SiteUpdateOneWithoutDeskSignsNestedInput
}

export type DeskSignUncheckedUpdateWithoutBaseStationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type DeskSignUncheckedUpdateManyWithoutBaseStationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  siteId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type DeskSignCreateManySiteInput = {
  id?: number
  signCode: string
  signName: string
  baseStationId?: number | null
  status?: number
  powerMode?: number
  clearStatus?: number
  lastContentTime?: Date | string | null
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  attributes?: string | null
  isDeleted?: boolean
}

export type DeskSignUpdateWithoutSiteInput = {
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  baseStation?: Prisma.BaseStationUpdateOneWithoutDeskSignsNestedInput
}

export type DeskSignUncheckedUpdateWithoutSiteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  baseStationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type DeskSignUncheckedUpdateManyWithoutSiteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  signCode?: Prisma.StringFieldUpdateOperationsInput | string
  signName?: Prisma.StringFieldUpdateOperationsInput | string
  baseStationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.IntFieldUpdateOperationsInput | number
  powerMode?: Prisma.IntFieldUpdateOperationsInput | number
  clearStatus?: Prisma.IntFieldUpdateOperationsInput | number
  lastContentTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  attributes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type DeskSignSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  signCode?: boolean
  signName?: boolean
  baseStationId?: boolean
  status?: boolean
  powerMode?: boolean
  clearStatus?: boolean
  lastContentTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
  site?: boolean | Prisma.DeskSign$siteArgs<ExtArgs>
  baseStation?: boolean | Prisma.DeskSign$baseStationArgs<ExtArgs>
}, ExtArgs["result"]["deskSign"]>

export type DeskSignSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  signCode?: boolean
  signName?: boolean
  baseStationId?: boolean
  status?: boolean
  powerMode?: boolean
  clearStatus?: boolean
  lastContentTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
  site?: boolean | Prisma.DeskSign$siteArgs<ExtArgs>
  baseStation?: boolean | Prisma.DeskSign$baseStationArgs<ExtArgs>
}, ExtArgs["result"]["deskSign"]>

export type DeskSignSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  signCode?: boolean
  signName?: boolean
  baseStationId?: boolean
  status?: boolean
  powerMode?: boolean
  clearStatus?: boolean
  lastContentTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
  site?: boolean | Prisma.DeskSign$siteArgs<ExtArgs>
  baseStation?: boolean | Prisma.DeskSign$baseStationArgs<ExtArgs>
}, ExtArgs["result"]["deskSign"]>

export type DeskSignSelectScalar = {
  id?: boolean
  signCode?: boolean
  signName?: boolean
  baseStationId?: boolean
  status?: boolean
  powerMode?: boolean
  clearStatus?: boolean
  lastContentTime?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  attributes?: boolean
  isDeleted?: boolean
  siteId?: boolean
}

export type DeskSignOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "signCode" | "signName" | "baseStationId" | "status" | "powerMode" | "clearStatus" | "lastContentTime" | "createTime" | "updateTime" | "remark" | "attributes" | "isDeleted" | "siteId", ExtArgs["result"]["deskSign"]>
export type DeskSignInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  site?: boolean | Prisma.DeskSign$siteArgs<ExtArgs>
  baseStation?: boolean | Prisma.DeskSign$baseStationArgs<ExtArgs>
}
export type DeskSignIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  site?: boolean | Prisma.DeskSign$siteArgs<ExtArgs>
  baseStation?: boolean | Prisma.DeskSign$baseStationArgs<ExtArgs>
}
export type DeskSignIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  site?: boolean | Prisma.DeskSign$siteArgs<ExtArgs>
  baseStation?: boolean | Prisma.DeskSign$baseStationArgs<ExtArgs>
}

export type $DeskSignPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DeskSign"
  objects: {
    site: Prisma.$SitePayload<ExtArgs> | null
    baseStation: Prisma.$BaseStationPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    signCode: string
    signName: string
    baseStationId: number | null
    status: number
    powerMode: number
    clearStatus: number
    lastContentTime: Date | null
    createTime: Date
    updateTime: Date
    remark: string | null
    attributes: string | null
    isDeleted: boolean
    siteId: number | null
  }, ExtArgs["result"]["deskSign"]>
  composites: {}
}

export type DeskSignGetPayload<S extends boolean | null | undefined | DeskSignDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DeskSignPayload, S>

export type DeskSignCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DeskSignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DeskSignCountAggregateInputType | true
  }

export interface DeskSignDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeskSign'], meta: { name: 'DeskSign' } }
  /**
   * Find zero or one DeskSign that matches the filter.
   * @param {DeskSignFindUniqueArgs} args - Arguments to find a DeskSign
   * @example
   * // Get one DeskSign
   * const deskSign = await prisma.deskSign.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DeskSignFindUniqueArgs>(args: Prisma.SelectSubset<T, DeskSignFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DeskSign that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DeskSignFindUniqueOrThrowArgs} args - Arguments to find a DeskSign
   * @example
   * // Get one DeskSign
   * const deskSign = await prisma.deskSign.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DeskSignFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DeskSignFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DeskSign that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignFindFirstArgs} args - Arguments to find a DeskSign
   * @example
   * // Get one DeskSign
   * const deskSign = await prisma.deskSign.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DeskSignFindFirstArgs>(args?: Prisma.SelectSubset<T, DeskSignFindFirstArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DeskSign that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignFindFirstOrThrowArgs} args - Arguments to find a DeskSign
   * @example
   * // Get one DeskSign
   * const deskSign = await prisma.deskSign.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DeskSignFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DeskSignFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DeskSigns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DeskSigns
   * const deskSigns = await prisma.deskSign.findMany()
   * 
   * // Get first 10 DeskSigns
   * const deskSigns = await prisma.deskSign.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const deskSignWithIdOnly = await prisma.deskSign.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DeskSignFindManyArgs>(args?: Prisma.SelectSubset<T, DeskSignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DeskSign.
   * @param {DeskSignCreateArgs} args - Arguments to create a DeskSign.
   * @example
   * // Create one DeskSign
   * const DeskSign = await prisma.deskSign.create({
   *   data: {
   *     // ... data to create a DeskSign
   *   }
   * })
   * 
   */
  create<T extends DeskSignCreateArgs>(args: Prisma.SelectSubset<T, DeskSignCreateArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DeskSigns.
   * @param {DeskSignCreateManyArgs} args - Arguments to create many DeskSigns.
   * @example
   * // Create many DeskSigns
   * const deskSign = await prisma.deskSign.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DeskSignCreateManyArgs>(args?: Prisma.SelectSubset<T, DeskSignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DeskSigns and returns the data saved in the database.
   * @param {DeskSignCreateManyAndReturnArgs} args - Arguments to create many DeskSigns.
   * @example
   * // Create many DeskSigns
   * const deskSign = await prisma.deskSign.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DeskSigns and only return the `id`
   * const deskSignWithIdOnly = await prisma.deskSign.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DeskSignCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DeskSignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DeskSign.
   * @param {DeskSignDeleteArgs} args - Arguments to delete one DeskSign.
   * @example
   * // Delete one DeskSign
   * const DeskSign = await prisma.deskSign.delete({
   *   where: {
   *     // ... filter to delete one DeskSign
   *   }
   * })
   * 
   */
  delete<T extends DeskSignDeleteArgs>(args: Prisma.SelectSubset<T, DeskSignDeleteArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DeskSign.
   * @param {DeskSignUpdateArgs} args - Arguments to update one DeskSign.
   * @example
   * // Update one DeskSign
   * const deskSign = await prisma.deskSign.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DeskSignUpdateArgs>(args: Prisma.SelectSubset<T, DeskSignUpdateArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DeskSigns.
   * @param {DeskSignDeleteManyArgs} args - Arguments to filter DeskSigns to delete.
   * @example
   * // Delete a few DeskSigns
   * const { count } = await prisma.deskSign.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DeskSignDeleteManyArgs>(args?: Prisma.SelectSubset<T, DeskSignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DeskSigns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DeskSigns
   * const deskSign = await prisma.deskSign.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DeskSignUpdateManyArgs>(args: Prisma.SelectSubset<T, DeskSignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DeskSigns and returns the data updated in the database.
   * @param {DeskSignUpdateManyAndReturnArgs} args - Arguments to update many DeskSigns.
   * @example
   * // Update many DeskSigns
   * const deskSign = await prisma.deskSign.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DeskSigns and only return the `id`
   * const deskSignWithIdOnly = await prisma.deskSign.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DeskSignUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DeskSignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DeskSign.
   * @param {DeskSignUpsertArgs} args - Arguments to update or create a DeskSign.
   * @example
   * // Update or create a DeskSign
   * const deskSign = await prisma.deskSign.upsert({
   *   create: {
   *     // ... data to create a DeskSign
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DeskSign we want to update
   *   }
   * })
   */
  upsert<T extends DeskSignUpsertArgs>(args: Prisma.SelectSubset<T, DeskSignUpsertArgs<ExtArgs>>): Prisma.Prisma__DeskSignClient<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DeskSigns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignCountArgs} args - Arguments to filter DeskSigns to count.
   * @example
   * // Count the number of DeskSigns
   * const count = await prisma.deskSign.count({
   *   where: {
   *     // ... the filter for the DeskSigns we want to count
   *   }
   * })
  **/
  count<T extends DeskSignCountArgs>(
    args?: Prisma.Subset<T, DeskSignCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DeskSignCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DeskSign.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DeskSignAggregateArgs>(args: Prisma.Subset<T, DeskSignAggregateArgs>): Prisma.PrismaPromise<GetDeskSignAggregateType<T>>

  /**
   * Group by DeskSign.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeskSignGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DeskSignGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DeskSignGroupByArgs['orderBy'] }
      : { orderBy?: DeskSignGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DeskSignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeskSignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DeskSign model
 */
readonly fields: DeskSignFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DeskSign.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DeskSignClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  site<T extends Prisma.DeskSign$siteArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DeskSign$siteArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  baseStation<T extends Prisma.DeskSign$baseStationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DeskSign$baseStationArgs<ExtArgs>>): Prisma.Prisma__BaseStationClient<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DeskSign model
 */
export interface DeskSignFieldRefs {
  readonly id: Prisma.FieldRef<"DeskSign", 'Int'>
  readonly signCode: Prisma.FieldRef<"DeskSign", 'String'>
  readonly signName: Prisma.FieldRef<"DeskSign", 'String'>
  readonly baseStationId: Prisma.FieldRef<"DeskSign", 'Int'>
  readonly status: Prisma.FieldRef<"DeskSign", 'Int'>
  readonly powerMode: Prisma.FieldRef<"DeskSign", 'Int'>
  readonly clearStatus: Prisma.FieldRef<"DeskSign", 'Int'>
  readonly lastContentTime: Prisma.FieldRef<"DeskSign", 'DateTime'>
  readonly createTime: Prisma.FieldRef<"DeskSign", 'DateTime'>
  readonly updateTime: Prisma.FieldRef<"DeskSign", 'DateTime'>
  readonly remark: Prisma.FieldRef<"DeskSign", 'String'>
  readonly attributes: Prisma.FieldRef<"DeskSign", 'String'>
  readonly isDeleted: Prisma.FieldRef<"DeskSign", 'Boolean'>
  readonly siteId: Prisma.FieldRef<"DeskSign", 'Int'>
}
    

// Custom InputTypes
/**
 * DeskSign findUnique
 */
export type DeskSignFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * Filter, which DeskSign to fetch.
   */
  where: Prisma.DeskSignWhereUniqueInput
}

/**
 * DeskSign findUniqueOrThrow
 */
export type DeskSignFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * Filter, which DeskSign to fetch.
   */
  where: Prisma.DeskSignWhereUniqueInput
}

/**
 * DeskSign findFirst
 */
export type DeskSignFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * Filter, which DeskSign to fetch.
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeskSigns to fetch.
   */
  orderBy?: Prisma.DeskSignOrderByWithRelationInput | Prisma.DeskSignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DeskSigns.
   */
  cursor?: Prisma.DeskSignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` DeskSigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeskSigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DeskSigns.
   */
  distinct?: Prisma.DeskSignScalarFieldEnum | Prisma.DeskSignScalarFieldEnum[]
}

/**
 * DeskSign findFirstOrThrow
 */
export type DeskSignFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * Filter, which DeskSign to fetch.
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeskSigns to fetch.
   */
  orderBy?: Prisma.DeskSignOrderByWithRelationInput | Prisma.DeskSignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DeskSigns.
   */
  cursor?: Prisma.DeskSignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` DeskSigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeskSigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DeskSigns.
   */
  distinct?: Prisma.DeskSignScalarFieldEnum | Prisma.DeskSignScalarFieldEnum[]
}

/**
 * DeskSign findMany
 */
export type DeskSignFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * Filter, which DeskSigns to fetch.
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeskSigns to fetch.
   */
  orderBy?: Prisma.DeskSignOrderByWithRelationInput | Prisma.DeskSignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DeskSigns.
   */
  cursor?: Prisma.DeskSignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` DeskSigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeskSigns.
   */
  skip?: number
  distinct?: Prisma.DeskSignScalarFieldEnum | Prisma.DeskSignScalarFieldEnum[]
}

/**
 * DeskSign create
 */
export type DeskSignCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * The data needed to create a DeskSign.
   */
  data: Prisma.XOR<Prisma.DeskSignCreateInput, Prisma.DeskSignUncheckedCreateInput>
}

/**
 * DeskSign createMany
 */
export type DeskSignCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DeskSigns.
   */
  data: Prisma.DeskSignCreateManyInput | Prisma.DeskSignCreateManyInput[]
}

/**
 * DeskSign createManyAndReturn
 */
export type DeskSignCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * The data used to create many DeskSigns.
   */
  data: Prisma.DeskSignCreateManyInput | Prisma.DeskSignCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DeskSign update
 */
export type DeskSignUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * The data needed to update a DeskSign.
   */
  data: Prisma.XOR<Prisma.DeskSignUpdateInput, Prisma.DeskSignUncheckedUpdateInput>
  /**
   * Choose, which DeskSign to update.
   */
  where: Prisma.DeskSignWhereUniqueInput
}

/**
 * DeskSign updateMany
 */
export type DeskSignUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DeskSigns.
   */
  data: Prisma.XOR<Prisma.DeskSignUpdateManyMutationInput, Prisma.DeskSignUncheckedUpdateManyInput>
  /**
   * Filter which DeskSigns to update
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * Limit how many DeskSigns to update.
   */
  limit?: number
}

/**
 * DeskSign updateManyAndReturn
 */
export type DeskSignUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * The data used to update DeskSigns.
   */
  data: Prisma.XOR<Prisma.DeskSignUpdateManyMutationInput, Prisma.DeskSignUncheckedUpdateManyInput>
  /**
   * Filter which DeskSigns to update
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * Limit how many DeskSigns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DeskSign upsert
 */
export type DeskSignUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * The filter to search for the DeskSign to update in case it exists.
   */
  where: Prisma.DeskSignWhereUniqueInput
  /**
   * In case the DeskSign found by the `where` argument doesn't exist, create a new DeskSign with this data.
   */
  create: Prisma.XOR<Prisma.DeskSignCreateInput, Prisma.DeskSignUncheckedCreateInput>
  /**
   * In case the DeskSign was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DeskSignUpdateInput, Prisma.DeskSignUncheckedUpdateInput>
}

/**
 * DeskSign delete
 */
export type DeskSignDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  /**
   * Filter which DeskSign to delete.
   */
  where: Prisma.DeskSignWhereUniqueInput
}

/**
 * DeskSign deleteMany
 */
export type DeskSignDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DeskSigns to delete
   */
  where?: Prisma.DeskSignWhereInput
  /**
   * Limit how many DeskSigns to delete.
   */
  limit?: number
}

/**
 * DeskSign.site
 */
export type DeskSign$siteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  where?: Prisma.SiteWhereInput
}

/**
 * DeskSign.baseStation
 */
export type DeskSign$baseStationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  where?: Prisma.BaseStationWhereInput
}

/**
 * DeskSign without action
 */
export type DeskSignDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
}
