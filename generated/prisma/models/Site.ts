
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Site` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Site
 * Âú∫Âú∞ÂÆû‰ΩìÔºàÂØπÂ∫îÊï∞ÊçÆÂ∫ìË°®Ôºösys_siteÔºâ
 * ÊîØÊåÅÁÆ°ÁêÜÂü∫Á´ô/Ê°åÁâå„ÄÅÊ†áËÆ∞‰ºöËÆÆÂú∫Âú∞„ÄÅÊü•ÁúãËØ¶ÊÉÖ
 */
export type SiteModel = runtime.Types.Result.DefaultSelection<Prisma.$SitePayload>

export type AggregateSite = {
  _count: SiteCountAggregateOutputType | null
  _avg: SiteAvgAggregateOutputType | null
  _sum: SiteSumAggregateOutputType | null
  _min: SiteMinAggregateOutputType | null
  _max: SiteMaxAggregateOutputType | null
}

export type SiteAvgAggregateOutputType = {
  id: number | null
  siteType: number | null
  status: number | null
}

export type SiteSumAggregateOutputType = {
  id: number | null
  siteType: number | null
  status: number | null
}

export type SiteMinAggregateOutputType = {
  id: number | null
  siteCode: string | null
  siteName: string | null
  siteType: number | null
  status: number | null
  createTime: Date | null
  updateTime: Date | null
  remark: string | null
  isDeleted: boolean | null
}

export type SiteMaxAggregateOutputType = {
  id: number | null
  siteCode: string | null
  siteName: string | null
  siteType: number | null
  status: number | null
  createTime: Date | null
  updateTime: Date | null
  remark: string | null
  isDeleted: boolean | null
}

export type SiteCountAggregateOutputType = {
  id: number
  siteCode: number
  siteName: number
  siteType: number
  status: number
  createTime: number
  updateTime: number
  remark: number
  isDeleted: number
  _all: number
}


export type SiteAvgAggregateInputType = {
  id?: true
  siteType?: true
  status?: true
}

export type SiteSumAggregateInputType = {
  id?: true
  siteType?: true
  status?: true
}

export type SiteMinAggregateInputType = {
  id?: true
  siteCode?: true
  siteName?: true
  siteType?: true
  status?: true
  createTime?: true
  updateTime?: true
  remark?: true
  isDeleted?: true
}

export type SiteMaxAggregateInputType = {
  id?: true
  siteCode?: true
  siteName?: true
  siteType?: true
  status?: true
  createTime?: true
  updateTime?: true
  remark?: true
  isDeleted?: true
}

export type SiteCountAggregateInputType = {
  id?: true
  siteCode?: true
  siteName?: true
  siteType?: true
  status?: true
  createTime?: true
  updateTime?: true
  remark?: true
  isDeleted?: true
  _all?: true
}

export type SiteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Site to aggregate.
   */
  where?: Prisma.SiteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sites to fetch.
   */
  orderBy?: Prisma.SiteOrderByWithRelationInput | Prisma.SiteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SiteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Sites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Sites
  **/
  _count?: true | SiteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SiteAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SiteSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SiteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SiteMaxAggregateInputType
}

export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
      [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSite[P]>
    : Prisma.GetScalarType<T[P], AggregateSite[P]>
}




export type SiteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SiteWhereInput
  orderBy?: Prisma.SiteOrderByWithAggregationInput | Prisma.SiteOrderByWithAggregationInput[]
  by: Prisma.SiteScalarFieldEnum[] | Prisma.SiteScalarFieldEnum
  having?: Prisma.SiteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SiteCountAggregateInputType | true
  _avg?: SiteAvgAggregateInputType
  _sum?: SiteSumAggregateInputType
  _min?: SiteMinAggregateInputType
  _max?: SiteMaxAggregateInputType
}

export type SiteGroupByOutputType = {
  id: number
  siteCode: string
  siteName: string
  siteType: number
  status: number
  createTime: Date
  updateTime: Date
  remark: string | null
  isDeleted: boolean
  _count: SiteCountAggregateOutputType | null
  _avg: SiteAvgAggregateOutputType | null
  _sum: SiteSumAggregateOutputType | null
  _min: SiteMinAggregateOutputType | null
  _max: SiteMaxAggregateOutputType | null
}

type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SiteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SiteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SiteGroupByOutputType[P]>
      }
    >
  >



export type SiteWhereInput = {
  AND?: Prisma.SiteWhereInput | Prisma.SiteWhereInput[]
  OR?: Prisma.SiteWhereInput[]
  NOT?: Prisma.SiteWhereInput | Prisma.SiteWhereInput[]
  id?: Prisma.IntFilter<"Site"> | number
  siteCode?: Prisma.StringFilter<"Site"> | string
  siteName?: Prisma.StringFilter<"Site"> | string
  siteType?: Prisma.IntFilter<"Site"> | number
  status?: Prisma.IntFilter<"Site"> | number
  createTime?: Prisma.DateTimeFilter<"Site"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"Site"> | Date | string
  remark?: Prisma.StringNullableFilter<"Site"> | string | null
  isDeleted?: Prisma.BoolFilter<"Site"> | boolean
  baseStations?: Prisma.BaseStationListRelationFilter
  deskSigns?: Prisma.DeskSignListRelationFilter
}

export type SiteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  siteCode?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  baseStations?: Prisma.BaseStationOrderByRelationAggregateInput
  deskSigns?: Prisma.DeskSignOrderByRelationAggregateInput
}

export type SiteWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  siteCode?: string
  AND?: Prisma.SiteWhereInput | Prisma.SiteWhereInput[]
  OR?: Prisma.SiteWhereInput[]
  NOT?: Prisma.SiteWhereInput | Prisma.SiteWhereInput[]
  siteName?: Prisma.StringFilter<"Site"> | string
  siteType?: Prisma.IntFilter<"Site"> | number
  status?: Prisma.IntFilter<"Site"> | number
  createTime?: Prisma.DateTimeFilter<"Site"> | Date | string
  updateTime?: Prisma.DateTimeFilter<"Site"> | Date | string
  remark?: Prisma.StringNullableFilter<"Site"> | string | null
  isDeleted?: Prisma.BoolFilter<"Site"> | boolean
  baseStations?: Prisma.BaseStationListRelationFilter
  deskSigns?: Prisma.DeskSignListRelationFilter
}, "id" | "siteCode">

export type SiteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  siteCode?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  _count?: Prisma.SiteCountOrderByAggregateInput
  _avg?: Prisma.SiteAvgOrderByAggregateInput
  _max?: Prisma.SiteMaxOrderByAggregateInput
  _min?: Prisma.SiteMinOrderByAggregateInput
  _sum?: Prisma.SiteSumOrderByAggregateInput
}

export type SiteScalarWhereWithAggregatesInput = {
  AND?: Prisma.SiteScalarWhereWithAggregatesInput | Prisma.SiteScalarWhereWithAggregatesInput[]
  OR?: Prisma.SiteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SiteScalarWhereWithAggregatesInput | Prisma.SiteScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Site"> | number
  siteCode?: Prisma.StringWithAggregatesFilter<"Site"> | string
  siteName?: Prisma.StringWithAggregatesFilter<"Site"> | string
  siteType?: Prisma.IntWithAggregatesFilter<"Site"> | number
  status?: Prisma.IntWithAggregatesFilter<"Site"> | number
  createTime?: Prisma.DateTimeWithAggregatesFilter<"Site"> | Date | string
  updateTime?: Prisma.DateTimeWithAggregatesFilter<"Site"> | Date | string
  remark?: Prisma.StringNullableWithAggregatesFilter<"Site"> | string | null
  isDeleted?: Prisma.BoolWithAggregatesFilter<"Site"> | boolean
}

export type SiteCreateInput = {
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
  baseStations?: Prisma.BaseStationCreateNestedManyWithoutSiteInput
  deskSigns?: Prisma.DeskSignCreateNestedManyWithoutSiteInput
}

export type SiteUncheckedCreateInput = {
  id?: number
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
  baseStations?: Prisma.BaseStationUncheckedCreateNestedManyWithoutSiteInput
  deskSigns?: Prisma.DeskSignUncheckedCreateNestedManyWithoutSiteInput
}

export type SiteUpdateInput = {
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  baseStations?: Prisma.BaseStationUpdateManyWithoutSiteNestedInput
  deskSigns?: Prisma.DeskSignUpdateManyWithoutSiteNestedInput
}

export type SiteUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  baseStations?: Prisma.BaseStationUncheckedUpdateManyWithoutSiteNestedInput
  deskSigns?: Prisma.DeskSignUncheckedUpdateManyWithoutSiteNestedInput
}

export type SiteCreateManyInput = {
  id?: number
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
}

export type SiteUpdateManyMutationInput = {
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type SiteUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type SiteNullableScalarRelationFilter = {
  is?: Prisma.SiteWhereInput | null
  isNot?: Prisma.SiteWhereInput | null
}

export type SiteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  siteCode?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type SiteAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type SiteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  siteCode?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type SiteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  siteCode?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createTime?: Prisma.SortOrder
  updateTime?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type SiteSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  siteType?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type SiteCreateNestedOneWithoutBaseStationsInput = {
  create?: Prisma.XOR<Prisma.SiteCreateWithoutBaseStationsInput, Prisma.SiteUncheckedCreateWithoutBaseStationsInput>
  connectOrCreate?: Prisma.SiteCreateOrConnectWithoutBaseStationsInput
  connect?: Prisma.SiteWhereUniqueInput
}

export type SiteUpdateOneWithoutBaseStationsNestedInput = {
  create?: Prisma.XOR<Prisma.SiteCreateWithoutBaseStationsInput, Prisma.SiteUncheckedCreateWithoutBaseStationsInput>
  connectOrCreate?: Prisma.SiteCreateOrConnectWithoutBaseStationsInput
  upsert?: Prisma.SiteUpsertWithoutBaseStationsInput
  disconnect?: Prisma.SiteWhereInput | boolean
  delete?: Prisma.SiteWhereInput | boolean
  connect?: Prisma.SiteWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SiteUpdateToOneWithWhereWithoutBaseStationsInput, Prisma.SiteUpdateWithoutBaseStationsInput>, Prisma.SiteUncheckedUpdateWithoutBaseStationsInput>
}

export type SiteCreateNestedOneWithoutDeskSignsInput = {
  create?: Prisma.XOR<Prisma.SiteCreateWithoutDeskSignsInput, Prisma.SiteUncheckedCreateWithoutDeskSignsInput>
  connectOrCreate?: Prisma.SiteCreateOrConnectWithoutDeskSignsInput
  connect?: Prisma.SiteWhereUniqueInput
}

export type SiteUpdateOneWithoutDeskSignsNestedInput = {
  create?: Prisma.XOR<Prisma.SiteCreateWithoutDeskSignsInput, Prisma.SiteUncheckedCreateWithoutDeskSignsInput>
  connectOrCreate?: Prisma.SiteCreateOrConnectWithoutDeskSignsInput
  upsert?: Prisma.SiteUpsertWithoutDeskSignsInput
  disconnect?: Prisma.SiteWhereInput | boolean
  delete?: Prisma.SiteWhereInput | boolean
  connect?: Prisma.SiteWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SiteUpdateToOneWithWhereWithoutDeskSignsInput, Prisma.SiteUpdateWithoutDeskSignsInput>, Prisma.SiteUncheckedUpdateWithoutDeskSignsInput>
}

export type SiteCreateWithoutBaseStationsInput = {
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
  deskSigns?: Prisma.DeskSignCreateNestedManyWithoutSiteInput
}

export type SiteUncheckedCreateWithoutBaseStationsInput = {
  id?: number
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
  deskSigns?: Prisma.DeskSignUncheckedCreateNestedManyWithoutSiteInput
}

export type SiteCreateOrConnectWithoutBaseStationsInput = {
  where: Prisma.SiteWhereUniqueInput
  create: Prisma.XOR<Prisma.SiteCreateWithoutBaseStationsInput, Prisma.SiteUncheckedCreateWithoutBaseStationsInput>
}

export type SiteUpsertWithoutBaseStationsInput = {
  update: Prisma.XOR<Prisma.SiteUpdateWithoutBaseStationsInput, Prisma.SiteUncheckedUpdateWithoutBaseStationsInput>
  create: Prisma.XOR<Prisma.SiteCreateWithoutBaseStationsInput, Prisma.SiteUncheckedCreateWithoutBaseStationsInput>
  where?: Prisma.SiteWhereInput
}

export type SiteUpdateToOneWithWhereWithoutBaseStationsInput = {
  where?: Prisma.SiteWhereInput
  data: Prisma.XOR<Prisma.SiteUpdateWithoutBaseStationsInput, Prisma.SiteUncheckedUpdateWithoutBaseStationsInput>
}

export type SiteUpdateWithoutBaseStationsInput = {
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deskSigns?: Prisma.DeskSignUpdateManyWithoutSiteNestedInput
}

export type SiteUncheckedUpdateWithoutBaseStationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deskSigns?: Prisma.DeskSignUncheckedUpdateManyWithoutSiteNestedInput
}

export type SiteCreateWithoutDeskSignsInput = {
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
  baseStations?: Prisma.BaseStationCreateNestedManyWithoutSiteInput
}

export type SiteUncheckedCreateWithoutDeskSignsInput = {
  id?: number
  siteCode: string
  siteName: string
  siteType: number
  status?: number
  createTime?: Date | string
  updateTime?: Date | string
  remark?: string | null
  isDeleted?: boolean
  baseStations?: Prisma.BaseStationUncheckedCreateNestedManyWithoutSiteInput
}

export type SiteCreateOrConnectWithoutDeskSignsInput = {
  where: Prisma.SiteWhereUniqueInput
  create: Prisma.XOR<Prisma.SiteCreateWithoutDeskSignsInput, Prisma.SiteUncheckedCreateWithoutDeskSignsInput>
}

export type SiteUpsertWithoutDeskSignsInput = {
  update: Prisma.XOR<Prisma.SiteUpdateWithoutDeskSignsInput, Prisma.SiteUncheckedUpdateWithoutDeskSignsInput>
  create: Prisma.XOR<Prisma.SiteCreateWithoutDeskSignsInput, Prisma.SiteUncheckedCreateWithoutDeskSignsInput>
  where?: Prisma.SiteWhereInput
}

export type SiteUpdateToOneWithWhereWithoutDeskSignsInput = {
  where?: Prisma.SiteWhereInput
  data: Prisma.XOR<Prisma.SiteUpdateWithoutDeskSignsInput, Prisma.SiteUncheckedUpdateWithoutDeskSignsInput>
}

export type SiteUpdateWithoutDeskSignsInput = {
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  baseStations?: Prisma.BaseStationUpdateManyWithoutSiteNestedInput
}

export type SiteUncheckedUpdateWithoutDeskSignsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  siteCode?: Prisma.StringFieldUpdateOperationsInput | string
  siteName?: Prisma.StringFieldUpdateOperationsInput | string
  siteType?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  createTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  baseStations?: Prisma.BaseStationUncheckedUpdateManyWithoutSiteNestedInput
}


/**
 * Count Type SiteCountOutputType
 */

export type SiteCountOutputType = {
  baseStations: number
  deskSigns: number
}

export type SiteCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  baseStations?: boolean | SiteCountOutputTypeCountBaseStationsArgs
  deskSigns?: boolean | SiteCountOutputTypeCountDeskSignsArgs
}

/**
 * SiteCountOutputType without action
 */
export type SiteCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteCountOutputType
   */
  select?: Prisma.SiteCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SiteCountOutputType without action
 */
export type SiteCountOutputTypeCountBaseStationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BaseStationWhereInput
}

/**
 * SiteCountOutputType without action
 */
export type SiteCountOutputTypeCountDeskSignsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DeskSignWhereInput
}


export type SiteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  siteCode?: boolean
  siteName?: boolean
  siteType?: boolean
  status?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  isDeleted?: boolean
  baseStations?: boolean | Prisma.Site$baseStationsArgs<ExtArgs>
  deskSigns?: boolean | Prisma.Site$deskSignsArgs<ExtArgs>
  _count?: boolean | Prisma.SiteCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["site"]>

export type SiteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  siteCode?: boolean
  siteName?: boolean
  siteType?: boolean
  status?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  isDeleted?: boolean
}, ExtArgs["result"]["site"]>

export type SiteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  siteCode?: boolean
  siteName?: boolean
  siteType?: boolean
  status?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  isDeleted?: boolean
}, ExtArgs["result"]["site"]>

export type SiteSelectScalar = {
  id?: boolean
  siteCode?: boolean
  siteName?: boolean
  siteType?: boolean
  status?: boolean
  createTime?: boolean
  updateTime?: boolean
  remark?: boolean
  isDeleted?: boolean
}

export type SiteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "siteCode" | "siteName" | "siteType" | "status" | "createTime" | "updateTime" | "remark" | "isDeleted", ExtArgs["result"]["site"]>
export type SiteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  baseStations?: boolean | Prisma.Site$baseStationsArgs<ExtArgs>
  deskSigns?: boolean | Prisma.Site$deskSignsArgs<ExtArgs>
  _count?: boolean | Prisma.SiteCountOutputTypeDefaultArgs<ExtArgs>
}
export type SiteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type SiteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $SitePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Site"
  objects: {
    baseStations: Prisma.$BaseStationPayload<ExtArgs>[]
    deskSigns: Prisma.$DeskSignPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    siteCode: string
    siteName: string
    siteType: number
    status: number
    createTime: Date
    updateTime: Date
    remark: string | null
    isDeleted: boolean
  }, ExtArgs["result"]["site"]>
  composites: {}
}

export type SiteGetPayload<S extends boolean | null | undefined | SiteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SitePayload, S>

export type SiteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SiteCountAggregateInputType | true
  }

export interface SiteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
  /**
   * Find zero or one Site that matches the filter.
   * @param {SiteFindUniqueArgs} args - Arguments to find a Site
   * @example
   * // Get one Site
   * const site = await prisma.site.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SiteFindUniqueArgs>(args: Prisma.SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Site that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
   * @example
   * // Get one Site
   * const site = await prisma.site.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Site that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteFindFirstArgs} args - Arguments to find a Site
   * @example
   * // Get one Site
   * const site = await prisma.site.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SiteFindFirstArgs>(args?: Prisma.SelectSubset<T, SiteFindFirstArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Site that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
   * @example
   * // Get one Site
   * const site = await prisma.site.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Sites that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sites
   * const sites = await prisma.site.findMany()
   * 
   * // Get first 10 Sites
   * const sites = await prisma.site.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SiteFindManyArgs>(args?: Prisma.SelectSubset<T, SiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Site.
   * @param {SiteCreateArgs} args - Arguments to create a Site.
   * @example
   * // Create one Site
   * const Site = await prisma.site.create({
   *   data: {
   *     // ... data to create a Site
   *   }
   * })
   * 
   */
  create<T extends SiteCreateArgs>(args: Prisma.SelectSubset<T, SiteCreateArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Sites.
   * @param {SiteCreateManyArgs} args - Arguments to create many Sites.
   * @example
   * // Create many Sites
   * const site = await prisma.site.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SiteCreateManyArgs>(args?: Prisma.SelectSubset<T, SiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Sites and returns the data saved in the database.
   * @param {SiteCreateManyAndReturnArgs} args - Arguments to create many Sites.
   * @example
   * // Create many Sites
   * const site = await prisma.site.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Sites and only return the `id`
   * const siteWithIdOnly = await prisma.site.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SiteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Site.
   * @param {SiteDeleteArgs} args - Arguments to delete one Site.
   * @example
   * // Delete one Site
   * const Site = await prisma.site.delete({
   *   where: {
   *     // ... filter to delete one Site
   *   }
   * })
   * 
   */
  delete<T extends SiteDeleteArgs>(args: Prisma.SelectSubset<T, SiteDeleteArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Site.
   * @param {SiteUpdateArgs} args - Arguments to update one Site.
   * @example
   * // Update one Site
   * const site = await prisma.site.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SiteUpdateArgs>(args: Prisma.SelectSubset<T, SiteUpdateArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Sites.
   * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
   * @example
   * // Delete a few Sites
   * const { count } = await prisma.site.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SiteDeleteManyArgs>(args?: Prisma.SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sites
   * const site = await prisma.site.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SiteUpdateManyArgs>(args: Prisma.SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sites and returns the data updated in the database.
   * @param {SiteUpdateManyAndReturnArgs} args - Arguments to update many Sites.
   * @example
   * // Update many Sites
   * const site = await prisma.site.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Sites and only return the `id`
   * const siteWithIdOnly = await prisma.site.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SiteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Site.
   * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
   * @example
   * // Update or create a Site
   * const site = await prisma.site.upsert({
   *   create: {
   *     // ... data to create a Site
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Site we want to update
   *   }
   * })
   */
  upsert<T extends SiteUpsertArgs>(args: Prisma.SelectSubset<T, SiteUpsertArgs<ExtArgs>>): Prisma.Prisma__SiteClient<runtime.Types.Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Sites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteCountArgs} args - Arguments to filter Sites to count.
   * @example
   * // Count the number of Sites
   * const count = await prisma.site.count({
   *   where: {
   *     // ... the filter for the Sites we want to count
   *   }
   * })
  **/
  count<T extends SiteCountArgs>(
    args?: Prisma.Subset<T, SiteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SiteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Site.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SiteAggregateArgs>(args: Prisma.Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

  /**
   * Group by Site.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SiteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SiteGroupByArgs['orderBy'] }
      : { orderBy?: SiteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Site model
 */
readonly fields: SiteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Site.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SiteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  baseStations<T extends Prisma.Site$baseStationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Site$baseStationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseStationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  deskSigns<T extends Prisma.Site$deskSignsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Site$deskSignsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeskSignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Site model
 */
export interface SiteFieldRefs {
  readonly id: Prisma.FieldRef<"Site", 'Int'>
  readonly siteCode: Prisma.FieldRef<"Site", 'String'>
  readonly siteName: Prisma.FieldRef<"Site", 'String'>
  readonly siteType: Prisma.FieldRef<"Site", 'Int'>
  readonly status: Prisma.FieldRef<"Site", 'Int'>
  readonly createTime: Prisma.FieldRef<"Site", 'DateTime'>
  readonly updateTime: Prisma.FieldRef<"Site", 'DateTime'>
  readonly remark: Prisma.FieldRef<"Site", 'String'>
  readonly isDeleted: Prisma.FieldRef<"Site", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Site findUnique
 */
export type SiteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * Filter, which Site to fetch.
   */
  where: Prisma.SiteWhereUniqueInput
}

/**
 * Site findUniqueOrThrow
 */
export type SiteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * Filter, which Site to fetch.
   */
  where: Prisma.SiteWhereUniqueInput
}

/**
 * Site findFirst
 */
export type SiteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * Filter, which Site to fetch.
   */
  where?: Prisma.SiteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sites to fetch.
   */
  orderBy?: Prisma.SiteOrderByWithRelationInput | Prisma.SiteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sites.
   */
  cursor?: Prisma.SiteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Sites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sites.
   */
  distinct?: Prisma.SiteScalarFieldEnum | Prisma.SiteScalarFieldEnum[]
}

/**
 * Site findFirstOrThrow
 */
export type SiteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * Filter, which Site to fetch.
   */
  where?: Prisma.SiteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sites to fetch.
   */
  orderBy?: Prisma.SiteOrderByWithRelationInput | Prisma.SiteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sites.
   */
  cursor?: Prisma.SiteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Sites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sites.
   */
  distinct?: Prisma.SiteScalarFieldEnum | Prisma.SiteScalarFieldEnum[]
}

/**
 * Site findMany
 */
export type SiteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * Filter, which Sites to fetch.
   */
  where?: Prisma.SiteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sites to fetch.
   */
  orderBy?: Prisma.SiteOrderByWithRelationInput | Prisma.SiteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Sites.
   */
  cursor?: Prisma.SiteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` Sites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sites.
   */
  skip?: number
  distinct?: Prisma.SiteScalarFieldEnum | Prisma.SiteScalarFieldEnum[]
}

/**
 * Site create
 */
export type SiteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * The data needed to create a Site.
   */
  data: Prisma.XOR<Prisma.SiteCreateInput, Prisma.SiteUncheckedCreateInput>
}

/**
 * Site createMany
 */
export type SiteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Sites.
   */
  data: Prisma.SiteCreateManyInput | Prisma.SiteCreateManyInput[]
}

/**
 * Site createManyAndReturn
 */
export type SiteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * The data used to create many Sites.
   */
  data: Prisma.SiteCreateManyInput | Prisma.SiteCreateManyInput[]
}

/**
 * Site update
 */
export type SiteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * The data needed to update a Site.
   */
  data: Prisma.XOR<Prisma.SiteUpdateInput, Prisma.SiteUncheckedUpdateInput>
  /**
   * Choose, which Site to update.
   */
  where: Prisma.SiteWhereUniqueInput
}

/**
 * Site updateMany
 */
export type SiteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Sites.
   */
  data: Prisma.XOR<Prisma.SiteUpdateManyMutationInput, Prisma.SiteUncheckedUpdateManyInput>
  /**
   * Filter which Sites to update
   */
  where?: Prisma.SiteWhereInput
  /**
   * Limit how many Sites to update.
   */
  limit?: number
}

/**
 * Site updateManyAndReturn
 */
export type SiteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * The data used to update Sites.
   */
  data: Prisma.XOR<Prisma.SiteUpdateManyMutationInput, Prisma.SiteUncheckedUpdateManyInput>
  /**
   * Filter which Sites to update
   */
  where?: Prisma.SiteWhereInput
  /**
   * Limit how many Sites to update.
   */
  limit?: number
}

/**
 * Site upsert
 */
export type SiteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * The filter to search for the Site to update in case it exists.
   */
  where: Prisma.SiteWhereUniqueInput
  /**
   * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
   */
  create: Prisma.XOR<Prisma.SiteCreateInput, Prisma.SiteUncheckedCreateInput>
  /**
   * In case the Site was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SiteUpdateInput, Prisma.SiteUncheckedUpdateInput>
}

/**
 * Site delete
 */
export type SiteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
  /**
   * Filter which Site to delete.
   */
  where: Prisma.SiteWhereUniqueInput
}

/**
 * Site deleteMany
 */
export type SiteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sites to delete
   */
  where?: Prisma.SiteWhereInput
  /**
   * Limit how many Sites to delete.
   */
  limit?: number
}

/**
 * Site.baseStations
 */
export type Site$baseStationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseStation
   */
  select?: Prisma.BaseStationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseStation
   */
  omit?: Prisma.BaseStationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseStationInclude<ExtArgs> | null
  where?: Prisma.BaseStationWhereInput
  orderBy?: Prisma.BaseStationOrderByWithRelationInput | Prisma.BaseStationOrderByWithRelationInput[]
  cursor?: Prisma.BaseStationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BaseStationScalarFieldEnum | Prisma.BaseStationScalarFieldEnum[]
}

/**
 * Site.deskSigns
 */
export type Site$deskSignsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeskSign
   */
  select?: Prisma.DeskSignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeskSign
   */
  omit?: Prisma.DeskSignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeskSignInclude<ExtArgs> | null
  where?: Prisma.DeskSignWhereInput
  orderBy?: Prisma.DeskSignOrderByWithRelationInput | Prisma.DeskSignOrderByWithRelationInput[]
  cursor?: Prisma.DeskSignWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DeskSignScalarFieldEnum | Prisma.DeskSignScalarFieldEnum[]
}

/**
 * Site without action
 */
export type SiteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Site
   */
  select?: Prisma.SiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Site
   */
  omit?: Prisma.SiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SiteInclude<ExtArgs> | null
}
