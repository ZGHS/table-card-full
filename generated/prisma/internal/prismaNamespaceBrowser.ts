
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models'
export type * from './prismaNamespace'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  BaseStation: 'BaseStation',
  DeskSign: 'DeskSign',
  Site: 'Site'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const BaseStationScalarFieldEnum = {
  id: 'id',
  stationCode: 'stationCode',
  stationName: 'stationName',
  ipAddress: 'ipAddress',
  port: 'port',
  bindStatus: 'bindStatus',
  status: 'status',
  lastOnlineTime: 'lastOnlineTime',
  createTime: 'createTime',
  updateTime: 'updateTime',
  remark: 'remark',
  attributes: 'attributes',
  isDeleted: 'isDeleted',
  siteId: 'siteId'
} as const

export type BaseStationScalarFieldEnum = (typeof BaseStationScalarFieldEnum)[keyof typeof BaseStationScalarFieldEnum]


export const DeskSignScalarFieldEnum = {
  id: 'id',
  signCode: 'signCode',
  signName: 'signName',
  baseStationId: 'baseStationId',
  status: 'status',
  powerMode: 'powerMode',
  clearStatus: 'clearStatus',
  lastContentTime: 'lastContentTime',
  createTime: 'createTime',
  updateTime: 'updateTime',
  remark: 'remark',
  attributes: 'attributes',
  isDeleted: 'isDeleted',
  siteId: 'siteId'
} as const

export type DeskSignScalarFieldEnum = (typeof DeskSignScalarFieldEnum)[keyof typeof DeskSignScalarFieldEnum]


export const SiteScalarFieldEnum = {
  id: 'id',
  siteCode: 'siteCode',
  siteName: 'siteName',
  siteType: 'siteType',
  status: 'status',
  createTime: 'createTime',
  updateTime: 'updateTime',
  remark: 'remark',
  isDeleted: 'isDeleted'
} as const

export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]

